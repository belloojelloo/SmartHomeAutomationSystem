
finalprojectembedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000408a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00800060  0000408a  0000411e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800126  00800126  000041e4  2**0
                  ALLOC
  3 .stab         00003828  00000000  00000000  000041e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f4  00000000  00000000  00007a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000acf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c994  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000caf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cd81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d54f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 0d 1e 	jmp	0x3c1a	; 0x3c1a <__vector_4>
      14:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <__vector_9>
      28:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <__vector_10>
      2c:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 33       	cpi	r26, 0x35	; 53
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <main>
      8a:	0c 94 43 20 	jmp	0x4086	; 0x4086 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e1       	ldi	r26, 0x17	; 23
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e1       	ldi	r24, 0x17	; 23
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	60 97       	sbiw	r28, 0x10	; 16
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	62 e0       	ldi	r22, 0x02	; 2
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	63 e0       	ldi	r22, 0x03	; 3
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	64 e0       	ldi	r22, 0x04	; 4
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	65 e0       	ldi	r22, 0x05	; 5
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	66 e0       	ldi	r22, 0x06	; 6
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	67 e0       	ldi	r22, 0x07	; 7
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1226:	1f 86       	std	Y+15, r1	; 0x0f
    1228:	ab c0       	rjmp	.+342    	; 0x1380 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	6f 85       	ldd	r22, Y+15	; 0x0f
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	6f 85       	ldd	r22, Y+15	; 0x0f
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    123e:	18 8a       	std	Y+16, r1	; 0x10
    1240:	22 c0       	rjmp	.+68     	; 0x1286 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1242:	88 89       	ldd	r24, Y+16	; 0x10
    1244:	98 2f       	mov	r25, r24
    1246:	9c 5f       	subi	r25, 0xFC	; 252
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	69 2f       	mov	r22, r25
    124c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1250:	88 23       	and	r24, r24
    1252:	b1 f4       	brne	.+44     	; 0x1280 <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1254:	8f 85       	ldd	r24, Y+15	; 0x0f
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	98 2f       	mov	r25, r24
    1264:	88 89       	ldd	r24, Y+16	; 0x10
    1266:	89 0f       	add	r24, r25
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	0e 94 c5 09 	call	0x138a	; 0x138a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    126e:	60 96       	adiw	r28, 0x10	; 16
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1280:	88 89       	ldd	r24, Y+16	; 0x10
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	88 8b       	std	Y+16, r24	; 0x10
    1286:	88 89       	ldd	r24, Y+16	; 0x10
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	d8 f2       	brcs	.-74     	; 0x1242 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a0 e2       	ldi	r26, 0x20	; 32
    129c:	b1 e4       	ldi	r27, 0x41	; 65
    129e:	8b 87       	std	Y+11, r24	; 0x0b
    12a0:	9c 87       	std	Y+12, r25	; 0x0c
    12a2:	ad 87       	std	Y+13, r26	; 0x0d
    12a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a ef       	ldi	r20, 0xFA	; 250
    12b4:	54 e4       	ldi	r21, 0x44	; 68
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8f 83       	std	Y+7, r24	; 0x07
    12c0:	98 87       	std	Y+8, r25	; 0x08
    12c2:	a9 87       	std	Y+9, r26	; 0x09
    12c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12da:	88 23       	and	r24, r24
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	3f c0       	rjmp	.+126    	; 0x1366 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	3f ef       	ldi	r19, 0xFF	; 255
    12f4:	4f e7       	ldi	r20, 0x7F	; 127
    12f6:	57 e4       	ldi	r21, 0x47	; 71
    12f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	4c f5       	brge	.+82     	; 0x1352 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1300:	6b 85       	ldd	r22, Y+11	; 0x0b
    1302:	7c 85       	ldd	r23, Y+12	; 0x0c
    1304:	8d 85       	ldd	r24, Y+13	; 0x0d
    1306:	9e 85       	ldd	r25, Y+14	; 0x0e
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	0f c0       	rjmp	.+30     	; 0x1348 <KEYPAD_getPressedKey+0x186>
    132a:	88 ec       	ldi	r24, 0xC8	; 200
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <KEYPAD_getPressedKey+0x174>
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	69 f7       	brne	.-38     	; 0x132a <KEYPAD_getPressedKey+0x168>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1352:	6f 81       	ldd	r22, Y+7	; 0x07
    1354:	78 85       	ldd	r23, Y+8	; 0x08
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <KEYPAD_getPressedKey+0x1b0>
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	8f 87       	std	Y+15, r24	; 0x0f
    1380:	8f 85       	ldd	r24, Y+15	; 0x0f
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	08 f4       	brcc	.+2      	; 0x1388 <KEYPAD_getPressedKey+0x1c6>
    1386:	51 cf       	rjmp	.-350    	; 0x122a <KEYPAD_getPressedKey+0x68>
    1388:	4e cf       	rjmp	.-356    	; 0x1226 <KEYPAD_getPressedKey+0x64>

0000138a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1398:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3c 83       	std	Y+4, r19	; 0x04
    13a2:	2b 83       	std	Y+3, r18	; 0x03
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	88 30       	cpi	r24, 0x08	; 8
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    13ae:	70 c0       	rjmp	.+224    	; 0x1490 <KEYPAD_4x4_adjustKeyNumber+0x106>
    13b0:	2b 81       	ldd	r18, Y+3	; 0x03
    13b2:	3c 81       	ldd	r19, Y+4	; 0x04
    13b4:	29 30       	cpi	r18, 0x09	; 9
    13b6:	31 05       	cpc	r19, r1
    13b8:	5c f5       	brge	.+86     	; 0x1410 <KEYPAD_4x4_adjustKeyNumber+0x86>
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    13c4:	59 c0       	rjmp	.+178    	; 0x1478 <KEYPAD_4x4_adjustKeyNumber+0xee>
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	25 30       	cpi	r18, 0x05	; 5
    13cc:	31 05       	cpc	r19, r1
    13ce:	9c f4       	brge	.+38     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <KEYPAD_4x4_adjustKeyNumber+0x52>
    13da:	48 c0       	rjmp	.+144    	; 0x146c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    13dc:	2b 81       	ldd	r18, Y+3	; 0x03
    13de:	3c 81       	ldd	r19, Y+4	; 0x04
    13e0:	23 30       	cpi	r18, 0x03	; 3
    13e2:	31 05       	cpc	r19, r1
    13e4:	0c f0       	brlt	.+2      	; 0x13e8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    13e6:	45 c0       	rjmp	.+138    	; 0x1472 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    13f2:	39 c0       	rjmp	.+114    	; 0x1466 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    13f4:	67 c0       	rjmp	.+206    	; 0x14c4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    13f6:	2b 81       	ldd	r18, Y+3	; 0x03
    13f8:	3c 81       	ldd	r19, Y+4	; 0x04
    13fa:	26 30       	cpi	r18, 0x06	; 6
    13fc:	31 05       	cpc	r19, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1400:	41 c0       	rjmp	.+130    	; 0x1484 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	87 30       	cpi	r24, 0x07	; 7
    1408:	91 05       	cpc	r25, r1
    140a:	0c f0       	brlt	.+2      	; 0x140e <KEYPAD_4x4_adjustKeyNumber+0x84>
    140c:	3e c0       	rjmp	.+124    	; 0x148a <KEYPAD_4x4_adjustKeyNumber+0x100>
    140e:	37 c0       	rjmp	.+110    	; 0x147e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1410:	2b 81       	ldd	r18, Y+3	; 0x03
    1412:	3c 81       	ldd	r19, Y+4	; 0x04
    1414:	2c 30       	cpi	r18, 0x0C	; 12
    1416:	31 05       	cpc	r19, r1
    1418:	09 f4       	brne	.+2      	; 0x141c <KEYPAD_4x4_adjustKeyNumber+0x92>
    141a:	46 c0       	rjmp	.+140    	; 0x14a8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	8d 30       	cpi	r24, 0x0D	; 13
    1422:	91 05       	cpc	r25, r1
    1424:	5c f4       	brge	.+22     	; 0x143c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1426:	2b 81       	ldd	r18, Y+3	; 0x03
    1428:	3c 81       	ldd	r19, Y+4	; 0x04
    142a:	2a 30       	cpi	r18, 0x0A	; 10
    142c:	31 05       	cpc	r19, r1
    142e:	b1 f1       	breq	.+108    	; 0x149c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	8b 30       	cpi	r24, 0x0B	; 11
    1436:	91 05       	cpc	r25, r1
    1438:	a4 f5       	brge	.+104    	; 0x14a2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    143a:	2d c0       	rjmp	.+90     	; 0x1496 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	2e 30       	cpi	r18, 0x0E	; 14
    1442:	31 05       	cpc	r19, r1
    1444:	b9 f1       	breq	.+110    	; 0x14b4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	8e 30       	cpi	r24, 0x0E	; 14
    144c:	91 05       	cpc	r25, r1
    144e:	7c f1       	brlt	.+94     	; 0x14ae <KEYPAD_4x4_adjustKeyNumber+0x124>
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	2f 30       	cpi	r18, 0x0F	; 15
    1456:	31 05       	cpc	r19, r1
    1458:	79 f1       	breq	.+94     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	80 31       	cpi	r24, 0x10	; 16
    1460:	91 05       	cpc	r25, r1
    1462:	69 f1       	breq	.+90     	; 0x14be <KEYPAD_4x4_adjustKeyNumber+0x134>
    1464:	2f c0       	rjmp	.+94     	; 0x14c4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1466:	87 e0       	ldi	r24, 0x07	; 7
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	2e c0       	rjmp	.+92     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    146c:	88 e0       	ldi	r24, 0x08	; 8
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	2b c0       	rjmp	.+86     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1472:	89 e0       	ldi	r24, 0x09	; 9
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	28 c0       	rjmp	.+80     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1478:	85 e2       	ldi	r24, 0x25	; 37
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	25 c0       	rjmp	.+74     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    147e:	84 e0       	ldi	r24, 0x04	; 4
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	22 c0       	rjmp	.+68     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1484:	85 e0       	ldi	r24, 0x05	; 5
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	1f c0       	rjmp	.+62     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    148a:	86 e0       	ldi	r24, 0x06	; 6
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	1c c0       	rjmp	.+56     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1490:	8a e2       	ldi	r24, 0x2A	; 42
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	19 c0       	rjmp	.+50     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	16 c0       	rjmp	.+44     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	13 c0       	rjmp	.+38     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	10 c0       	rjmp	.+32     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    14a8:	8d e2       	ldi	r24, 0x2D	; 45
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    14ae:	8d e0       	ldi	r24, 0x0D	; 13
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	0a c0       	rjmp	.+20     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    14b4:	19 82       	std	Y+1, r1	; 0x01
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    14b8:	8d e3       	ldi	r24, 0x3D	; 61
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    14be:	8b e2       	ldi	r24, 0x2B	; 43
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	2e 97       	sbiw	r28, 0x0e	; 14
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a0 ea       	ldi	r26, 0xA0	; 160
    1506:	b1 e4       	ldi	r27, 0x41	; 65
    1508:	8b 87       	std	Y+11, r24	; 0x0b
    150a:	9c 87       	std	Y+12, r25	; 0x0c
    150c:	ad 87       	std	Y+13, r26	; 0x0d
    150e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1510:	6b 85       	ldd	r22, Y+11	; 0x0b
    1512:	7c 85       	ldd	r23, Y+12	; 0x0c
    1514:	8d 85       	ldd	r24, Y+13	; 0x0d
    1516:	9e 85       	ldd	r25, Y+14	; 0x0e
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	4a ef       	ldi	r20, 0xFA	; 250
    151e:	54 e4       	ldi	r21, 0x44	; 68
    1520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	8f 83       	std	Y+7, r24	; 0x07
    152a:	98 87       	std	Y+8, r25	; 0x08
    152c:	a9 87       	std	Y+9, r26	; 0x09
    152e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1530:	6f 81       	ldd	r22, Y+7	; 0x07
    1532:	78 85       	ldd	r23, Y+8	; 0x08
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	9a 85       	ldd	r25, Y+10	; 0x0a
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1544:	88 23       	and	r24, r24
    1546:	2c f4       	brge	.+10     	; 0x1552 <LCD_init+0x7a>
		__ticks = 1;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	3f c0       	rjmp	.+126    	; 0x15d0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	3f ef       	ldi	r19, 0xFF	; 255
    155e:	4f e7       	ldi	r20, 0x7F	; 127
    1560:	57 e4       	ldi	r21, 0x47	; 71
    1562:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1566:	18 16       	cp	r1, r24
    1568:	4c f5       	brge	.+82     	; 0x15bc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156a:	6b 85       	ldd	r22, Y+11	; 0x0b
    156c:	7c 85       	ldd	r23, Y+12	; 0x0c
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e2       	ldi	r20, 0x20	; 32
    1578:	51 e4       	ldi	r21, 0x41	; 65
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	bc 01       	movw	r22, r24
    1584:	cd 01       	movw	r24, r26
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	9e 83       	std	Y+6, r25	; 0x06
    1590:	8d 83       	std	Y+5, r24	; 0x05
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <LCD_init+0xda>
    1594:	88 ec       	ldi	r24, 0xC8	; 200
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <LCD_init+0xc8>
    15a4:	9c 83       	std	Y+4, r25	; 0x04
    15a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	69 f7       	brne	.-38     	; 0x1594 <LCD_init+0xbc>
    15ba:	14 c0       	rjmp	.+40     	; 0x15e4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	9a 81       	ldd	r25, Y+2	; 0x02
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <LCD_init+0x104>
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	6f ef       	ldi	r22, 0xFF	; 255
    15e8:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    15ec:	88 e3       	ldi	r24, 0x38	; 56
    15ee:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    15f2:	8c e0       	ldi	r24, 0x0C	; 12
    15f4:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_sendCommand>
}
    15fe:	2e 96       	adiw	r28, 0x0e	; 14
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	e9 97       	sbiw	r28, 0x39	; 57
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a0 e8       	ldi	r26, 0x80	; 128
    1636:	bf e3       	ldi	r27, 0x3F	; 63
    1638:	8d ab       	std	Y+53, r24	; 0x35
    163a:	9e ab       	std	Y+54, r25	; 0x36
    163c:	af ab       	std	Y+55, r26	; 0x37
    163e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1640:	6d a9       	ldd	r22, Y+53	; 0x35
    1642:	7e a9       	ldd	r23, Y+54	; 0x36
    1644:	8f a9       	ldd	r24, Y+55	; 0x37
    1646:	98 ad       	ldd	r25, Y+56	; 0x38
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a ef       	ldi	r20, 0xFA	; 250
    164e:	54 e4       	ldi	r21, 0x44	; 68
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	89 ab       	std	Y+49, r24	; 0x31
    165a:	9a ab       	std	Y+50, r25	; 0x32
    165c:	ab ab       	std	Y+51, r26	; 0x33
    165e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1660:	69 a9       	ldd	r22, Y+49	; 0x31
    1662:	7a a9       	ldd	r23, Y+50	; 0x32
    1664:	8b a9       	ldd	r24, Y+51	; 0x33
    1666:	9c a9       	ldd	r25, Y+52	; 0x34
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f4       	brge	.+10     	; 0x1682 <LCD_sendCommand+0x72>
		__ticks = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	98 ab       	std	Y+48, r25	; 0x30
    167e:	8f a7       	std	Y+47, r24	; 0x2f
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1682:	69 a9       	ldd	r22, Y+49	; 0x31
    1684:	7a a9       	ldd	r23, Y+50	; 0x32
    1686:	8b a9       	ldd	r24, Y+51	; 0x33
    1688:	9c a9       	ldd	r25, Y+52	; 0x34
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	4c f5       	brge	.+82     	; 0x16ec <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	6d a9       	ldd	r22, Y+53	; 0x35
    169c:	7e a9       	ldd	r23, Y+54	; 0x36
    169e:	8f a9       	ldd	r24, Y+55	; 0x37
    16a0:	98 ad       	ldd	r25, Y+56	; 0x38
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	98 ab       	std	Y+48, r25	; 0x30
    16c0:	8f a7       	std	Y+47, r24	; 0x2f
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <LCD_sendCommand+0xd2>
    16c4:	88 ec       	ldi	r24, 0xC8	; 200
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9e a7       	std	Y+46, r25	; 0x2e
    16ca:	8d a7       	std	Y+45, r24	; 0x2d
    16cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    16ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <LCD_sendCommand+0xc0>
    16d4:	9e a7       	std	Y+46, r25	; 0x2e
    16d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16da:	98 a9       	ldd	r25, Y+48	; 0x30
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	98 ab       	std	Y+48, r25	; 0x30
    16e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e4:	98 a9       	ldd	r25, Y+48	; 0x30
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	69 f7       	brne	.-38     	; 0x16c4 <LCD_sendCommand+0xb4>
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ec:	69 a9       	ldd	r22, Y+49	; 0x31
    16ee:	7a a9       	ldd	r23, Y+50	; 0x32
    16f0:	8b a9       	ldd	r24, Y+51	; 0x33
    16f2:	9c a9       	ldd	r25, Y+52	; 0x34
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	98 ab       	std	Y+48, r25	; 0x30
    16fe:	8f a7       	std	Y+47, r24	; 0x2f
    1700:	8f a5       	ldd	r24, Y+47	; 0x2f
    1702:	98 a9       	ldd	r25, Y+48	; 0x30
    1704:	9c a7       	std	Y+44, r25	; 0x2c
    1706:	8b a7       	std	Y+43, r24	; 0x2b
    1708:	8b a5       	ldd	r24, Y+43	; 0x2b
    170a:	9c a5       	ldd	r25, Y+44	; 0x2c
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCD_sendCommand+0xfc>
    1710:	9c a7       	std	Y+44, r25	; 0x2c
    1712:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e8       	ldi	r26, 0x80	; 128
    1724:	bf e3       	ldi	r27, 0x3F	; 63
    1726:	8f a3       	std	Y+39, r24	; 0x27
    1728:	98 a7       	std	Y+40, r25	; 0x28
    172a:	a9 a7       	std	Y+41, r26	; 0x29
    172c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	6f a1       	ldd	r22, Y+39	; 0x27
    1730:	78 a5       	ldd	r23, Y+40	; 0x28
    1732:	89 a5       	ldd	r24, Y+41	; 0x29
    1734:	9a a5       	ldd	r25, Y+42	; 0x2a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a ef       	ldi	r20, 0xFA	; 250
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	8b a3       	std	Y+35, r24	; 0x23
    1748:	9c a3       	std	Y+36, r25	; 0x24
    174a:	ad a3       	std	Y+37, r26	; 0x25
    174c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    174e:	6b a1       	ldd	r22, Y+35	; 0x23
    1750:	7c a1       	ldd	r23, Y+36	; 0x24
    1752:	8d a1       	ldd	r24, Y+37	; 0x25
    1754:	9e a1       	ldd	r25, Y+38	; 0x26
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	2c f4       	brge	.+10     	; 0x1770 <LCD_sendCommand+0x160>
		__ticks = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9a a3       	std	Y+34, r25	; 0x22
    176c:	89 a3       	std	Y+33, r24	; 0x21
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1770:	6b a1       	ldd	r22, Y+35	; 0x23
    1772:	7c a1       	ldd	r23, Y+36	; 0x24
    1774:	8d a1       	ldd	r24, Y+37	; 0x25
    1776:	9e a1       	ldd	r25, Y+38	; 0x26
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	4c f5       	brge	.+82     	; 0x17da <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1788:	6f a1       	ldd	r22, Y+39	; 0x27
    178a:	78 a5       	ldd	r23, Y+40	; 0x28
    178c:	89 a5       	ldd	r24, Y+41	; 0x29
    178e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9a a3       	std	Y+34, r25	; 0x22
    17ae:	89 a3       	std	Y+33, r24	; 0x21
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <LCD_sendCommand+0x1c0>
    17b2:	88 ec       	ldi	r24, 0xC8	; 200
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	98 a3       	std	Y+32, r25	; 0x20
    17b8:	8f 8f       	std	Y+31, r24	; 0x1f
    17ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17bc:	98 a1       	ldd	r25, Y+32	; 0x20
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_sendCommand+0x1ae>
    17c2:	98 a3       	std	Y+32, r25	; 0x20
    17c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	89 a1       	ldd	r24, Y+33	; 0x21
    17c8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	9a a3       	std	Y+34, r25	; 0x22
    17ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	89 a1       	ldd	r24, Y+33	; 0x21
    17d2:	9a a1       	ldd	r25, Y+34	; 0x22
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f7       	brne	.-38     	; 0x17b2 <LCD_sendCommand+0x1a2>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9a a3       	std	Y+34, r25	; 0x22
    17ec:	89 a3       	std	Y+33, r24	; 0x21
    17ee:	89 a1       	ldd	r24, Y+33	; 0x21
    17f0:	9a a1       	ldd	r25, Y+34	; 0x22
    17f2:	9e 8f       	std	Y+30, r25	; 0x1e
    17f4:	8d 8f       	std	Y+29, r24	; 0x1d
    17f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <LCD_sendCommand+0x1ea>
    17fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1800:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	69 ad       	ldd	r22, Y+57	; 0x39
    1806:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a0 e8       	ldi	r26, 0x80	; 128
    1810:	bf e3       	ldi	r27, 0x3F	; 63
    1812:	89 8f       	std	Y+25, r24	; 0x19
    1814:	9a 8f       	std	Y+26, r25	; 0x1a
    1816:	ab 8f       	std	Y+27, r26	; 0x1b
    1818:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181a:	69 8d       	ldd	r22, Y+25	; 0x19
    181c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4a ef       	ldi	r20, 0xFA	; 250
    1828:	54 e4       	ldi	r21, 0x44	; 68
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	8d 8b       	std	Y+21, r24	; 0x15
    1834:	9e 8b       	std	Y+22, r25	; 0x16
    1836:	af 8b       	std	Y+23, r26	; 0x17
    1838:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    183a:	6d 89       	ldd	r22, Y+21	; 0x15
    183c:	7e 89       	ldd	r23, Y+22	; 0x16
    183e:	8f 89       	ldd	r24, Y+23	; 0x17
    1840:	98 8d       	ldd	r25, Y+24	; 0x18
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	2c f4       	brge	.+10     	; 0x185c <LCD_sendCommand+0x24c>
		__ticks = 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	9c 8b       	std	Y+20, r25	; 0x14
    1858:	8b 8b       	std	Y+19, r24	; 0x13
    185a:	3f c0       	rjmp	.+126    	; 0x18da <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    185c:	6d 89       	ldd	r22, Y+21	; 0x15
    185e:	7e 89       	ldd	r23, Y+22	; 0x16
    1860:	8f 89       	ldd	r24, Y+23	; 0x17
    1862:	98 8d       	ldd	r25, Y+24	; 0x18
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	57 e4       	ldi	r21, 0x47	; 71
    186c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	4c f5       	brge	.+82     	; 0x18c6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1874:	69 8d       	ldd	r22, Y+25	; 0x19
    1876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9c 8b       	std	Y+20, r25	; 0x14
    189a:	8b 8b       	std	Y+19, r24	; 0x13
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <LCD_sendCommand+0x2ac>
    189e:	88 ec       	ldi	r24, 0xC8	; 200
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9a 8b       	std	Y+18, r25	; 0x12
    18a4:	89 8b       	std	Y+17, r24	; 0x11
    18a6:	89 89       	ldd	r24, Y+17	; 0x11
    18a8:	9a 89       	ldd	r25, Y+18	; 0x12
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_sendCommand+0x29a>
    18ae:	9a 8b       	std	Y+18, r25	; 0x12
    18b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b2:	8b 89       	ldd	r24, Y+19	; 0x13
    18b4:	9c 89       	ldd	r25, Y+20	; 0x14
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	9c 8b       	std	Y+20, r25	; 0x14
    18ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18bc:	8b 89       	ldd	r24, Y+19	; 0x13
    18be:	9c 89       	ldd	r25, Y+20	; 0x14
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	69 f7       	brne	.-38     	; 0x189e <LCD_sendCommand+0x28e>
    18c4:	14 c0       	rjmp	.+40     	; 0x18ee <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c6:	6d 89       	ldd	r22, Y+21	; 0x15
    18c8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ca:	8f 89       	ldd	r24, Y+23	; 0x17
    18cc:	98 8d       	ldd	r25, Y+24	; 0x18
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9c 8b       	std	Y+20, r25	; 0x14
    18d8:	8b 8b       	std	Y+19, r24	; 0x13
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	9c 89       	ldd	r25, Y+20	; 0x14
    18de:	98 8b       	std	Y+16, r25	; 0x10
    18e0:	8f 87       	std	Y+15, r24	; 0x0f
    18e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e4:	98 89       	ldd	r25, Y+16	; 0x10
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <LCD_sendCommand+0x2d6>
    18ea:	98 8b       	std	Y+16, r25	; 0x10
    18ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e8       	ldi	r26, 0x80	; 128
    18fe:	bf e3       	ldi	r27, 0x3F	; 63
    1900:	8b 87       	std	Y+11, r24	; 0x0b
    1902:	9c 87       	std	Y+12, r25	; 0x0c
    1904:	ad 87       	std	Y+13, r26	; 0x0d
    1906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8f 83       	std	Y+7, r24	; 0x07
    1922:	98 87       	std	Y+8, r25	; 0x08
    1924:	a9 87       	std	Y+9, r26	; 0x09
    1926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_sendCommand+0x33a>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	6b 85       	ldd	r22, Y+11	; 0x0b
    1964:	7c 85       	ldd	r23, Y+12	; 0x0c
    1966:	8d 85       	ldd	r24, Y+13	; 0x0d
    1968:	9e 85       	ldd	r25, Y+14	; 0x0e
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_sendCommand+0x39a>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_sendCommand+0x388>
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_sendCommand+0x37c>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6f 81       	ldd	r22, Y+7	; 0x07
    19b6:	78 85       	ldd	r23, Y+8	; 0x08
    19b8:	89 85       	ldd	r24, Y+9	; 0x09
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_sendCommand+0x3c4>
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    19dc:	e9 96       	adiw	r28, 0x39	; 57
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	e9 97       	sbiw	r28, 0x39	; 57
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e8       	ldi	r26, 0x80	; 128
    1a14:	bf e3       	ldi	r27, 0x3F	; 63
    1a16:	8d ab       	std	Y+53, r24	; 0x35
    1a18:	9e ab       	std	Y+54, r25	; 0x36
    1a1a:	af ab       	std	Y+55, r26	; 0x37
    1a1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a20:	7e a9       	ldd	r23, Y+54	; 0x36
    1a22:	8f a9       	ldd	r24, Y+55	; 0x37
    1a24:	98 ad       	ldd	r25, Y+56	; 0x38
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a ef       	ldi	r20, 0xFA	; 250
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	89 ab       	std	Y+49, r24	; 0x31
    1a38:	9a ab       	std	Y+50, r25	; 0x32
    1a3a:	ab ab       	std	Y+51, r26	; 0x33
    1a3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a40:	7a a9       	ldd	r23, Y+50	; 0x32
    1a42:	8b a9       	ldd	r24, Y+51	; 0x33
    1a44:	9c a9       	ldd	r25, Y+52	; 0x34
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	98 ab       	std	Y+48, r25	; 0x30
    1a5c:	8f a7       	std	Y+47, r24	; 0x2f
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1a60:	69 a9       	ldd	r22, Y+49	; 0x31
    1a62:	7a a9       	ldd	r23, Y+50	; 0x32
    1a64:	8b a9       	ldd	r24, Y+51	; 0x33
    1a66:	9c a9       	ldd	r25, Y+52	; 0x34
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6d a9       	ldd	r22, Y+53	; 0x35
    1a7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	98 ab       	std	Y+48, r25	; 0x30
    1a9e:	8f a7       	std	Y+47, r24	; 0x2f
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_displayCharacter+0xd2>
    1aa2:	88 ec       	ldi	r24, 0xC8	; 200
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9e a7       	std	Y+46, r25	; 0x2e
    1aa8:	8d a7       	std	Y+45, r24	; 0x2d
    1aaa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aac:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_displayCharacter+0xc0>
    1ab2:	9e a7       	std	Y+46, r25	; 0x2e
    1ab4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	98 ab       	std	Y+48, r25	; 0x30
    1abe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_displayCharacter+0xb4>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	69 a9       	ldd	r22, Y+49	; 0x31
    1acc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ace:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	98 ab       	std	Y+48, r25	; 0x30
    1adc:	8f a7       	std	Y+47, r24	; 0x2f
    1ade:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae2:	9c a7       	std	Y+44, r25	; 0x2c
    1ae4:	8b a7       	std	Y+43, r24	; 0x2b
    1ae6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_displayCharacter+0xfc>
    1aee:	9c a7       	std	Y+44, r25	; 0x2c
    1af0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e8       	ldi	r26, 0x80	; 128
    1b02:	bf e3       	ldi	r27, 0x3F	; 63
    1b04:	8f a3       	std	Y+39, r24	; 0x27
    1b06:	98 a7       	std	Y+40, r25	; 0x28
    1b08:	a9 a7       	std	Y+41, r26	; 0x29
    1b0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b10:	89 a5       	ldd	r24, Y+41	; 0x29
    1b12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a ef       	ldi	r20, 0xFA	; 250
    1b1a:	54 e4       	ldi	r21, 0x44	; 68
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8b a3       	std	Y+35, r24	; 0x23
    1b26:	9c a3       	std	Y+36, r25	; 0x24
    1b28:	ad a3       	std	Y+37, r26	; 0x25
    1b2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b30:	8d a1       	ldd	r24, Y+37	; 0x25
    1b32:	9e a1       	ldd	r25, Y+38	; 0x26
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <LCD_displayCharacter+0x160>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9a a3       	std	Y+34, r25	; 0x22
    1b4a:	89 a3       	std	Y+33, r24	; 0x21
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b50:	7c a1       	ldd	r23, Y+36	; 0x24
    1b52:	8d a1       	ldd	r24, Y+37	; 0x25
    1b54:	9e a1       	ldd	r25, Y+38	; 0x26
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	4c f5       	brge	.+82     	; 0x1bb8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b66:	6f a1       	ldd	r22, Y+39	; 0x27
    1b68:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9a a3       	std	Y+34, r25	; 0x22
    1b8c:	89 a3       	std	Y+33, r24	; 0x21
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <LCD_displayCharacter+0x1c0>
    1b90:	88 ec       	ldi	r24, 0xC8	; 200
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	98 a3       	std	Y+32, r25	; 0x20
    1b96:	8f 8f       	std	Y+31, r24	; 0x1f
    1b98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b9a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_displayCharacter+0x1ae>
    1ba0:	98 a3       	std	Y+32, r25	; 0x20
    1ba2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	9a a3       	std	Y+34, r25	; 0x22
    1bac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <LCD_displayCharacter+0x1a2>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bba:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9a a3       	std	Y+34, r25	; 0x22
    1bca:	89 a3       	std	Y+33, r24	; 0x21
    1bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bce:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_displayCharacter+0x1ea>
    1bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bde:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	69 ad       	ldd	r22, Y+57	; 0x39
    1be4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e8       	ldi	r26, 0x80	; 128
    1bee:	bf e3       	ldi	r27, 0x3F	; 63
    1bf0:	89 8f       	std	Y+25, r24	; 0x19
    1bf2:	9a 8f       	std	Y+26, r25	; 0x1a
    1bf4:	ab 8f       	std	Y+27, r26	; 0x1b
    1bf6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a ef       	ldi	r20, 0xFA	; 250
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8d 8b       	std	Y+21, r24	; 0x15
    1c12:	9e 8b       	std	Y+22, r25	; 0x16
    1c14:	af 8b       	std	Y+23, r26	; 0x17
    1c16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c18:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9c 8b       	std	Y+20, r25	; 0x14
    1c36:	8b 8b       	std	Y+19, r24	; 0x13
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1c3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c40:	98 8d       	ldd	r25, Y+24	; 0x18
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	4c f5       	brge	.+82     	; 0x1ca4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	69 8d       	ldd	r22, Y+25	; 0x19
    1c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9c 8b       	std	Y+20, r25	; 0x14
    1c78:	8b 8b       	std	Y+19, r24	; 0x13
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <LCD_displayCharacter+0x2ac>
    1c7c:	88 ec       	ldi	r24, 0xC8	; 200
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9a 8b       	std	Y+18, r25	; 0x12
    1c82:	89 8b       	std	Y+17, r24	; 0x11
    1c84:	89 89       	ldd	r24, Y+17	; 0x11
    1c86:	9a 89       	ldd	r25, Y+18	; 0x12
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_displayCharacter+0x29a>
    1c8c:	9a 8b       	std	Y+18, r25	; 0x12
    1c8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	9c 8b       	std	Y+20, r25	; 0x14
    1c98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <LCD_displayCharacter+0x28e>
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    1caa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9c 8b       	std	Y+20, r25	; 0x14
    1cb6:	8b 8b       	std	Y+19, r24	; 0x13
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	98 8b       	std	Y+16, r25	; 0x10
    1cbe:	8f 87       	std	Y+15, r24	; 0x0f
    1cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc2:	98 89       	ldd	r25, Y+16	; 0x10
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <LCD_displayCharacter+0x2d6>
    1cc8:	98 8b       	std	Y+16, r25	; 0x10
    1cca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e8       	ldi	r26, 0x80	; 128
    1cdc:	bf e3       	ldi	r27, 0x3F	; 63
    1cde:	8b 87       	std	Y+11, r24	; 0x0b
    1ce0:	9c 87       	std	Y+12, r25	; 0x0c
    1ce2:	ad 87       	std	Y+13, r26	; 0x0d
    1ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8f 83       	std	Y+7, r24	; 0x07
    1d00:	98 87       	std	Y+8, r25	; 0x08
    1d02:	a9 87       	std	Y+9, r26	; 0x09
    1d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <LCD_displayCharacter+0x39a>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_displayCharacter+0x388>
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9e 83       	std	Y+6, r25	; 0x06
    1d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <LCD_displayCharacter+0x37c>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_displayCharacter+0x3c4>
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1dba:	e9 96       	adiw	r28, 0x39	; 57
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <LCD_displayString+0x6>
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	9b 83       	std	Y+3, r25	; 0x03
    1dda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ddc:	19 82       	std	Y+1, r1	; 0x01
    1dde:	0e c0       	rjmp	.+28     	; 0x1dfc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dea:	fc 01       	movw	r30, r24
    1dec:	e2 0f       	add	r30, r18
    1dee:	f3 1f       	adc	r31, r19
    1df0:	80 81       	ld	r24, Z
    1df2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_displayCharacter>
		i++;
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	fc 01       	movw	r30, r24
    1e08:	e2 0f       	add	r30, r18
    1e0a:	f3 1f       	adc	r31, r19
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 23       	and	r24, r24
    1e10:	39 f7       	brne	.-50     	; 0x1de0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <LCD_moveCursor+0x6>
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <LCD_moveCursor+0x8>
    1e26:	0f 92       	push	r0
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
    1e2e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	3d 83       	std	Y+5, r19	; 0x05
    1e38:	2c 83       	std	Y+4, r18	; 0x04
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	91 05       	cpc	r25, r1
    1e42:	c1 f0       	breq	.+48     	; 0x1e74 <LCD_moveCursor+0x56>
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <LCD_moveCursor+0x3a>
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	61 f0       	breq	.+24     	; 0x1e6e <LCD_moveCursor+0x50>
    1e56:	19 c0       	rjmp	.+50     	; 0x1e8a <LCD_moveCursor+0x6c>
    1e58:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	31 05       	cpc	r19, r1
    1e60:	69 f0       	breq	.+26     	; 0x1e7c <LCD_moveCursor+0x5e>
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	9d 81       	ldd	r25, Y+5	; 0x05
    1e66:	83 30       	cpi	r24, 0x03	; 3
    1e68:	91 05       	cpc	r25, r1
    1e6a:	61 f0       	breq	.+24     	; 0x1e84 <LCD_moveCursor+0x66>
    1e6c:	0e c0       	rjmp	.+28     	; 0x1e8a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	0b c0       	rjmp	.+22     	; 0x1e8a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	80 5c       	subi	r24, 0xC0	; 192
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	80 5f       	subi	r24, 0xF0	; 240
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	80 5b       	subi	r24, 0xB0	; 176
    1e88:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	80 68       	ori	r24, 0x80	; 128
    1e8e:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_sendCommand>
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <LCD_displayStringRowColumn+0x6>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <LCD_displayStringRowColumn+0x8>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	6a 83       	std	Y+2, r22	; 0x02
    1eb2:	5c 83       	std	Y+4, r21	; 0x04
    1eb4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	6a 81       	ldd	r22, Y+2	; 0x02
    1eba:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	62 97       	sbiw	r28, 0x12	; 18
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	9a 8b       	std	Y+18, r25	; 0x12
    1eea:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1eec:	89 89       	ldd	r24, Y+17	; 0x11
    1eee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef0:	9e 01       	movw	r18, r28
    1ef2:	2f 5f       	subi	r18, 0xFF	; 255
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	b9 01       	movw	r22, r18
    1ef8:	4a e0       	ldi	r20, 0x0A	; 10
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <itoa>
   LCD_displayString(buff); /* Display the string */
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
}
    1f08:	62 96       	adiw	r28, 0x12	; 18
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_sendCommand>
}
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <senduart>:
uint8 status = 0;
uint8 enter = 0;
volatile uint8 secs = 0;
Timer_ConfigType timer15 = {0,39061,TIMER1, F_CPU_1024,COMPARE_MODE };

void senduart(uint8 mail){
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	0f 92       	push	r0
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(ready);
    1f3a:	87 e0       	ldi	r24, 0x07	; 7
    1f3c:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <UART_sendByte>
	while( UART_recieveByte() != iamready );
    1f40:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <UART_recieveByte>
    1f44:	88 30       	cpi	r24, 0x08	; 8
    1f46:	e1 f7       	brne	.-8      	; 0x1f40 <senduart+0x12>
	UART_sendByte(mail);
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <UART_sendByte>
}
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <receiveuart>:
uint8 receiveuart(void){
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != ready);
    1f5e:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <UART_recieveByte>
    1f62:	87 30       	cpi	r24, 0x07	; 7
    1f64:	e1 f7       	brne	.-8      	; 0x1f5e <receiveuart+0x8>
	UART_sendByte(iamready);
    1f66:	88 e0       	ldi	r24, 0x08	; 8
    1f68:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <UART_sendByte>
	return UART_recieveByte();
    1f6c:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <UART_recieveByte>
}
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <sendpassUART>:
void sendpassUART(uint8 *string){
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <sendpassUART+0x6>
    1f7c:	0f 92       	push	r0
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	9b 83       	std	Y+3, r25	; 0x03
    1f84:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(ready);
    1f86:	87 e0       	ldi	r24, 0x07	; 7
    1f88:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <UART_sendByte>
	while(UART_recieveByte() != iamready);
    1f8c:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <UART_recieveByte>
    1f90:	88 30       	cpi	r24, 0x08	; 8
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <sendpassUART+0x16>
	for (uint8 counter = 0; counter < PASS_SIZE; counter++){
    1f94:	19 82       	std	Y+1, r1	; 0x01
    1f96:	0e c0       	rjmp	.+28     	; 0x1fb4 <sendpassUART+0x3e>
		UART_sendByte(string[counter]);
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <UART_sendByte>
	return UART_recieveByte();
}
void sendpassUART(uint8 *string){
	UART_sendByte(ready);
	while(UART_recieveByte() != iamready);
	for (uint8 counter = 0; counter < PASS_SIZE; counter++){
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	85 30       	cpi	r24, 0x05	; 5
    1fb8:	78 f3       	brcs	.-34     	; 0x1f98 <sendpassUART+0x22>
		UART_sendByte(string[counter]);
	}
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <receivepassUART>:
void receivepassUART(uint8 *Str){
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <receivepassUART+0xa>
    1fd0:	0f 92       	push	r0
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	9b 83       	std	Y+3, r25	; 0x03
    1fd8:	8a 83       	std	Y+2, r24	; 0x02
	while(UART_recieveByte() != ready);
    1fda:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <UART_recieveByte>
    1fde:	87 30       	cpi	r24, 0x07	; 7
    1fe0:	e1 f7       	brne	.-8      	; 0x1fda <receivepassUART+0x14>
	UART_sendByte(iamready);
    1fe2:	88 e0       	ldi	r24, 0x08	; 8
    1fe4:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <UART_sendByte>
	for (uint8 counter = 0; counter < PASS_SIZE; counter++)
    1fe8:	19 82       	std	Y+1, r1	; 0x01
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <receivepassUART+0x44>
	{
		Str[counter] = UART_recieveByte();
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff6:	8c 01       	movw	r16, r24
    1ff8:	02 0f       	add	r16, r18
    1ffa:	13 1f       	adc	r17, r19
    1ffc:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <UART_recieveByte>
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
	}
}
void receivepassUART(uint8 *Str){
	while(UART_recieveByte() != ready);
	UART_sendByte(iamready);
	for (uint8 counter = 0; counter < PASS_SIZE; counter++)
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	8f 5f       	subi	r24, 0xFF	; 255
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	85 30       	cpi	r24, 0x05	; 5
    200e:	70 f3       	brcs	.-36     	; 0x1fec <receivepassUART+0x26>
	{
		Str[counter] = UART_recieveByte();
	}
}
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	08 95       	ret

00002020 <timermotorstop>:

void timermotorstop(void){
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	secs++;
    2028:	80 91 2e 01 	lds	r24, 0x012E
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	80 93 2e 01 	sts	0x012E, r24
	if(secs>=3){
    2032:	80 91 2e 01 	lds	r24, 0x012E
    2036:	83 30       	cpi	r24, 0x03	; 3
    2038:	28 f0       	brcs	.+10     	; 0x2044 <timermotorstop+0x24>
		Timer_deInit(TIMER1);
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	0e 94 92 1c 	call	0x3924	; 0x3924 <Timer_deInit>
		secs = 0;
    2040:	10 92 2e 01 	sts	0x012E, r1
	}
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <timercallback>:
void timercallback(void){
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
	secs++;
    2052:	80 91 2e 01 	lds	r24, 0x012E
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	80 93 2e 01 	sts	0x012E, r24
}
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <timerbuzzer>:
void timerbuzzer(void){
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	secs++;
    206a:	80 91 2e 01 	lds	r24, 0x012E
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	80 93 2e 01 	sts	0x012E, r24
	if(secs>=12){
    2074:	80 91 2e 01 	lds	r24, 0x012E
    2078:	8c 30       	cpi	r24, 0x0C	; 12
    207a:	28 f0       	brcs	.+10     	; 0x2086 <timerbuzzer+0x24>
		Timer_deInit(TIMER1);
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	0e 94 92 1c 	call	0x3924	; 0x3924 <Timer_deInit>
		secs = 0;
    2082:	10 92 2e 01 	sts	0x012E, r1

	}
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <askPassword>:
void askPassword(char *password){
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	6f 97       	sbiw	r28, 0x1f	; 31
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	9f 8f       	std	Y+31, r25	; 0x1f
    20a6:	8e 8f       	std	Y+30, r24	; 0x1e
	for (uint8 i = 0; i < PASS_SIZE; i++) {
    20a8:	1d 8e       	std	Y+29, r1	; 0x1d
    20aa:	84 c0       	rjmp	.+264    	; 0x21b4 <askPassword+0x128>
		password[i] = KEYPAD_getPressedKey();
    20ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20b6:	8c 01       	movw	r16, r24
    20b8:	02 0f       	add	r16, r18
    20ba:	13 1f       	adc	r17, r19
    20bc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    20c0:	f8 01       	movw	r30, r16
    20c2:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    20c4:	8a e2       	ldi	r24, 0x2A	; 42
    20c6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <LCD_displayCharacter>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	aa ef       	ldi	r26, 0xFA	; 250
    20d0:	b3 e4       	ldi	r27, 0x43	; 67
    20d2:	89 8f       	std	Y+25, r24	; 0x19
    20d4:	9a 8f       	std	Y+26, r25	; 0x1a
    20d6:	ab 8f       	std	Y+27, r26	; 0x1b
    20d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	69 8d       	ldd	r22, Y+25	; 0x19
    20dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a ef       	ldi	r20, 0xFA	; 250
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8d 8b       	std	Y+21, r24	; 0x15
    20f4:	9e 8b       	std	Y+22, r25	; 0x16
    20f6:	af 8b       	std	Y+23, r26	; 0x17
    20f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20fa:	6d 89       	ldd	r22, Y+21	; 0x15
    20fc:	7e 89       	ldd	r23, Y+22	; 0x16
    20fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2100:	98 8d       	ldd	r25, Y+24	; 0x18
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <askPassword+0x90>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9c 8b       	std	Y+20, r25	; 0x14
    2118:	8b 8b       	std	Y+19, r24	; 0x13
    211a:	3f c0       	rjmp	.+126    	; 0x219a <askPassword+0x10e>
	else if (__tmp > 65535)
    211c:	6d 89       	ldd	r22, Y+21	; 0x15
    211e:	7e 89       	ldd	r23, Y+22	; 0x16
    2120:	8f 89       	ldd	r24, Y+23	; 0x17
    2122:	98 8d       	ldd	r25, Y+24	; 0x18
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <askPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	69 8d       	ldd	r22, Y+25	; 0x19
    2136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9c 8b       	std	Y+20, r25	; 0x14
    215a:	8b 8b       	std	Y+19, r24	; 0x13
    215c:	0f c0       	rjmp	.+30     	; 0x217c <askPassword+0xf0>
    215e:	88 ec       	ldi	r24, 0xC8	; 200
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9a 8b       	std	Y+18, r25	; 0x12
    2164:	89 8b       	std	Y+17, r24	; 0x11
    2166:	89 89       	ldd	r24, Y+17	; 0x11
    2168:	9a 89       	ldd	r25, Y+18	; 0x12
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <askPassword+0xde>
    216e:	9a 8b       	std	Y+18, r25	; 0x12
    2170:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	8b 89       	ldd	r24, Y+19	; 0x13
    2174:	9c 89       	ldd	r25, Y+20	; 0x14
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	8b 89       	ldd	r24, Y+19	; 0x13
    217e:	9c 89       	ldd	r25, Y+20	; 0x14
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <askPassword+0xd2>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <askPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	6d 89       	ldd	r22, Y+21	; 0x15
    2188:	7e 89       	ldd	r23, Y+22	; 0x16
    218a:	8f 89       	ldd	r24, Y+23	; 0x17
    218c:	98 8d       	ldd	r25, Y+24	; 0x18
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9c 8b       	std	Y+20, r25	; 0x14
    2198:	8b 8b       	std	Y+19, r24	; 0x13
    219a:	8b 89       	ldd	r24, Y+19	; 0x13
    219c:	9c 89       	ldd	r25, Y+20	; 0x14
    219e:	98 8b       	std	Y+16, r25	; 0x10
    21a0:	8f 87       	std	Y+15, r24	; 0x0f
    21a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a4:	98 89       	ldd	r25, Y+16	; 0x10
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <askPassword+0x11a>
    21aa:	98 8b       	std	Y+16, r25	; 0x10
    21ac:	8f 87       	std	Y+15, r24	; 0x0f
		secs = 0;

	}
}
void askPassword(char *password){
	for (uint8 i = 0; i < PASS_SIZE; i++) {
    21ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	8d 8f       	std	Y+29, r24	; 0x1d
    21b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b6:	85 30       	cpi	r24, 0x05	; 5
    21b8:	08 f4       	brcc	.+2      	; 0x21bc <askPassword+0x130>
    21ba:	78 cf       	rjmp	.-272    	; 0x20ac <askPassword+0x20>
		password[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	while (KEYPAD_getPressedKey() != 13);
    21bc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    21c0:	8d 30       	cpi	r24, 0x0D	; 13
    21c2:	91 05       	cpc	r25, r1
    21c4:	d9 f7       	brne	.-10     	; 0x21bc <askPassword+0x130>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	aa ef       	ldi	r26, 0xFA	; 250
    21cc:	b3 e4       	ldi	r27, 0x43	; 67
    21ce:	8b 87       	std	Y+11, r24	; 0x0b
    21d0:	9c 87       	std	Y+12, r25	; 0x0c
    21d2:	ad 87       	std	Y+13, r26	; 0x0d
    21d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4a ef       	ldi	r20, 0xFA	; 250
    21e4:	54 e4       	ldi	r21, 0x44	; 68
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	8f 83       	std	Y+7, r24	; 0x07
    21f0:	98 87       	std	Y+8, r25	; 0x08
    21f2:	a9 87       	std	Y+9, r26	; 0x09
    21f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f6:	6f 81       	ldd	r22, Y+7	; 0x07
    21f8:	78 85       	ldd	r23, Y+8	; 0x08
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	2c f4       	brge	.+10     	; 0x2218 <askPassword+0x18c>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	3f c0       	rjmp	.+126    	; 0x2296 <askPassword+0x20a>
	else if (__tmp > 65535)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	4c f5       	brge	.+82     	; 0x2282 <askPassword+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	6b 85       	ldd	r22, Y+11	; 0x0b
    2232:	7c 85       	ldd	r23, Y+12	; 0x0c
    2234:	8d 85       	ldd	r24, Y+13	; 0x0d
    2236:	9e 85       	ldd	r25, Y+14	; 0x0e
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e2       	ldi	r20, 0x20	; 32
    223e:	51 e4       	ldi	r21, 0x41	; 65
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9e 83       	std	Y+6, r25	; 0x06
    2256:	8d 83       	std	Y+5, r24	; 0x05
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <askPassword+0x1ec>
    225a:	88 ec       	ldi	r24, 0xC8	; 200
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9c 83       	std	Y+4, r25	; 0x04
    2260:	8b 83       	std	Y+3, r24	; 0x03
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <askPassword+0x1da>
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	69 f7       	brne	.-38     	; 0x225a <askPassword+0x1ce>
    2280:	14 c0       	rjmp	.+40     	; 0x22aa <askPassword+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	8d 83       	std	Y+5, r24	; 0x05
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <askPassword+0x216>
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);


}
    22aa:	6f 96       	adiw	r28, 0x1f	; 31
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	08 95       	ret

000022c0 <dooropen>:
void dooropen(void){
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
	attempts = 0;
    22c8:	10 92 27 01 	sts	0x0127, r1
	LCD_clearScreen();
    22cc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>

	LCD_displayString("Door is unlocking...");
    22d0:	80 e6       	ldi	r24, 0x60	; 96
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
	delay_seconds(3);
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 85 11 	call	0x230a	; 0x230a <delay_seconds>
	LCD_clearScreen();
    22e0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
	LCD_displayString("Waiting for people to enter");
    22e4:	85 e7       	ldi	r24, 0x75	; 117
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
	receiveuart();
    22ec:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <receiveuart>
	LCD_clearScreen();
    22f0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
	LCD_displayString("Door is locking");
    22f4:	81 e9       	ldi	r24, 0x91	; 145
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
	delay_seconds(3);
    22fc:	83 e0       	ldi	r24, 0x03	; 3
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e 94 85 11 	call	0x230a	; 0x230a <delay_seconds>

}
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <delay_seconds>:
void delay_seconds(uint8 seconds) {
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	0f 92       	push	r0
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	89 83       	std	Y+1, r24	; 0x01
	secs = 0;
    2316:	10 92 2e 01 	sts	0x012E, r1
	Timer_init(&timer15);
    231a:	8f e1       	ldi	r24, 0x1F	; 31
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	0e 94 aa 1b 	call	0x3754	; 0x3754 <Timer_init>
	Timer_setCallBack(timercallback, TIMER1);
    2322:	85 e2       	ldi	r24, 0x25	; 37
    2324:	90 e1       	ldi	r25, 0x10	; 16
    2326:	61 e0       	ldi	r22, 0x01	; 1
    2328:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <Timer_setCallBack>
	while (secs < seconds);
    232c:	90 91 2e 01 	lds	r25, 0x012E
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	98 17       	cp	r25, r24
    2334:	d8 f3       	brcs	.-10     	; 0x232c <delay_seconds+0x22>
	Timer_deInit(TIMER1);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 92 1c 	call	0x3924	; 0x3924 <Timer_deInit>
}
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <createpass>:
void createpass(void){
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	68 97       	sbiw	r28, 0x18	; 24
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	af c0       	rjmp	.+350    	; 0x24b8 <createpass+0x174>
	char password[PASS_SIZE];
	char passwordReenter[PASS_SIZE];
	while(!passwordset){
		LCD_clearScreen();
    235a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
		LCD_displayString("plz enter pass:");
    235e:	81 ea       	ldi	r24, 0xA1	; 161
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
		LCD_moveCursor(1,0);
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
		askPassword(password);
    236e:	ce 01       	movw	r24, r28
    2370:	0f 96       	adiw	r24, 0x0f	; 15
    2372:	0e 94 46 10 	call	0x208c	; 0x208c <askPassword>
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	a0 e2       	ldi	r26, 0x20	; 32
    237c:	b1 e4       	ldi	r27, 0x41	; 65
    237e:	8b 87       	std	Y+11, r24	; 0x0b
    2380:	9c 87       	std	Y+12, r25	; 0x0c
    2382:	ad 87       	std	Y+13, r26	; 0x0d
    2384:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2386:	6b 85       	ldd	r22, Y+11	; 0x0b
    2388:	7c 85       	ldd	r23, Y+12	; 0x0c
    238a:	8d 85       	ldd	r24, Y+13	; 0x0d
    238c:	9e 85       	ldd	r25, Y+14	; 0x0e
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4a ef       	ldi	r20, 0xFA	; 250
    2394:	54 e4       	ldi	r21, 0x44	; 68
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	8f 83       	std	Y+7, r24	; 0x07
    23a0:	98 87       	std	Y+8, r25	; 0x08
    23a2:	a9 87       	std	Y+9, r26	; 0x09
    23a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e8       	ldi	r20, 0x80	; 128
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	2c f4       	brge	.+10     	; 0x23c8 <createpass+0x84>
		__ticks = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	3f c0       	rjmp	.+126    	; 0x2446 <createpass+0x102>
	else if (__tmp > 65535)
    23c8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ca:	78 85       	ldd	r23, Y+8	; 0x08
    23cc:	89 85       	ldd	r24, Y+9	; 0x09
    23ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	3f ef       	ldi	r19, 0xFF	; 255
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	57 e4       	ldi	r21, 0x47	; 71
    23d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23dc:	18 16       	cp	r1, r24
    23de:	4c f5       	brge	.+82     	; 0x2432 <createpass+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e2       	ldi	r20, 0x20	; 32
    23ee:	51 e4       	ldi	r21, 0x41	; 65
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <createpass+0xe4>
    240a:	88 ec       	ldi	r24, 0xC8	; 200
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9c 83       	std	Y+4, r25	; 0x04
    2410:	8b 83       	std	Y+3, r24	; 0x03
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <createpass+0xd2>
    241a:	9c 83       	std	Y+4, r25	; 0x04
    241c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	69 f7       	brne	.-38     	; 0x240a <createpass+0xc6>
    2430:	14 c0       	rjmp	.+40     	; 0x245a <createpass+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2432:	6f 81       	ldd	r22, Y+7	; 0x07
    2434:	78 85       	ldd	r23, Y+8	; 0x08
    2436:	89 85       	ldd	r24, Y+9	; 0x09
    2438:	9a 85       	ldd	r25, Y+10	; 0x0a
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	9e 81       	ldd	r25, Y+6	; 0x06
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <createpass+0x10e>
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		LCD_clearScreen();
    245a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
		sendpassUART(password);
    245e:	ce 01       	movw	r24, r28
    2460:	0f 96       	adiw	r24, 0x0f	; 15
    2462:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <sendpassUART>
		LCD_clearScreen();
    2466:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"plz re-enter the");
    246a:	21 eb       	ldi	r18, 0xB1	; 177
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	a9 01       	movw	r20, r18
    2474:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"same pass:");
    2478:	22 ec       	ldi	r18, 0xC2	; 194
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	a9 01       	movw	r20, r18
    2482:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,10);
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	6a e0       	ldi	r22, 0x0A	; 10
    248a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
		askPassword(passwordReenter);
    248e:	ce 01       	movw	r24, r28
    2490:	44 96       	adiw	r24, 0x14	; 20
    2492:	0e 94 46 10 	call	0x208c	; 0x208c <askPassword>
		sendpassUART(passwordReenter);
    2496:	ce 01       	movw	r24, r28
    2498:	44 96       	adiw	r24, 0x14	; 20
    249a:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <sendpassUART>
		LCD_clearScreen();
    249e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
		result = receiveuart();
    24a2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <receiveuart>
    24a6:	80 93 26 01 	sts	0x0126, r24
		if(result == 1){
    24aa:	80 91 26 01 	lds	r24, 0x0126
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	19 f4       	brne	.+6      	; 0x24b8 <createpass+0x174>
			passwordset = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	80 93 2a 01 	sts	0x012A, r24
	Timer_deInit(TIMER1);
}
void createpass(void){
	char password[PASS_SIZE];
	char passwordReenter[PASS_SIZE];
	while(!passwordset){
    24b8:	80 91 2a 01 	lds	r24, 0x012A
    24bc:	88 23       	and	r24, r24
    24be:	09 f4       	brne	.+2      	; 0x24c2 <createpass+0x17e>
    24c0:	4c cf       	rjmp	.-360    	; 0x235a <createpass+0x16>
		result = receiveuart();
		if(result == 1){
			passwordset = 1;
		}
	}
}
    24c2:	68 96       	adiw	r28, 0x18	; 24
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <main>:


int main(void){
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	c7 5c       	subi	r28, 0xC7	; 199
    24e2:	d0 40       	sbci	r29, 0x00	; 0
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uartconfig;//= {eightbit,NONE,ONE_STOP_BIT,9600};
	uartconfig.bit_data = eightbit;
    24ee:	fe 01       	movw	r30, r28
    24f0:	e9 54       	subi	r30, 0x49	; 73
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	81 83       	std	Z+1, r24	; 0x01
	uartconfig.parity =NONE;
    24f8:	fe 01       	movw	r30, r28
    24fa:	e9 54       	subi	r30, 0x49	; 73
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	10 82       	st	Z, r1
	uartconfig.stop_bit = ONE_STOP_BIT;
    2500:	fe 01       	movw	r30, r28
    2502:	e9 54       	subi	r30, 0x49	; 73
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	16 82       	std	Z+6, r1	; 0x06
	uartconfig.baud_rate = 9600;
    2508:	fe 01       	movw	r30, r28
    250a:	e9 54       	subi	r30, 0x49	; 73
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	80 e8       	ldi	r24, 0x80	; 128
    2510:	95 e2       	ldi	r25, 0x25	; 37
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	82 83       	std	Z+2, r24	; 0x02
    2518:	93 83       	std	Z+3, r25	; 0x03
    251a:	a4 83       	std	Z+4, r26	; 0x04
    251c:	b5 83       	std	Z+5, r27	; 0x05
	UART_init(&uartconfig);
    251e:	ce 01       	movw	r24, r28
    2520:	89 54       	subi	r24, 0x49	; 73
    2522:	9f 4f       	sbci	r25, 0xFF	; 255
    2524:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <UART_init>
	LCD_init();
    2528:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <LCD_init>
	char password[PASS_SIZE];
	char passwordReenter[PASS_SIZE];
	SREG |= (1<<7);
    252c:	af e5       	ldi	r26, 0x5F	; 95
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	ef e5       	ldi	r30, 0x5F	; 95
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	80 68       	ori	r24, 0x80	; 128
    2538:	8c 93       	st	X, r24
	createpass();
    253a:	0e 94 a2 11 	call	0x2344	; 0x2344 <createpass>
	while(1){
		if(passwordset == 0){
    253e:	80 91 2a 01 	lds	r24, 0x012A
    2542:	88 23       	and	r24, r24
    2544:	11 f0       	breq	.+4      	; 0x254a <main+0x76>
    2546:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <main+0x1270>
			createpass();
    254a:	0e 94 a2 11 	call	0x2344	; 0x2344 <createpass>
    254e:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <main+0x1270>
		}
		while(passwordset){

			/* Go through*/
			LCD_clearScreen();
    2552:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"+ : OPEN DOOR");
    2556:	2d ec       	ldi	r18, 0xCD	; 205
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	a9 01       	movw	r20, r18
    2560:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"- : CHANGE PASS");
    2564:	2b ed       	ldi	r18, 0xDB	; 219
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	a9 01       	movw	r20, r18
    256e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <LCD_displayStringRowColumn>
			selection = KEYPAD_getPressedKey();
    2572:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <KEYPAD_getPressedKey>
    2576:	80 93 2b 01 	sts	0x012B, r24
    257a:	fe 01       	movw	r30, r28
    257c:	ed 54       	subi	r30, 0x4D	; 77
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	aa ef       	ldi	r26, 0xFA	; 250
    2586:	b3 e4       	ldi	r27, 0x43	; 67
    2588:	80 83       	st	Z, r24
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	a2 83       	std	Z+2, r26	; 0x02
    258e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	8e 01       	movw	r16, r28
    2592:	01 55       	subi	r16, 0x51	; 81
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	ed 54       	subi	r30, 0x4D	; 77
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25be:	fe 01       	movw	r30, r28
    25c0:	e1 55       	subi	r30, 0x51	; 81
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	44 f4       	brge	.+16     	; 0x25ec <main+0x118>
		__ticks = 1;
    25dc:	fe 01       	movw	r30, r28
    25de:	e3 55       	subi	r30, 0x53	; 83
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
    25ea:	64 c0       	rjmp	.+200    	; 0x26b4 <main+0x1e0>
	else if (__tmp > 65535)
    25ec:	fe 01       	movw	r30, r28
    25ee:	e1 55       	subi	r30, 0x51	; 81
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	0c f0       	brlt	.+2      	; 0x260c <main+0x138>
    260a:	43 c0       	rjmp	.+134    	; 0x2692 <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	fe 01       	movw	r30, r28
    260e:	ed 54       	subi	r30, 0x4D	; 77
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e2       	ldi	r20, 0x20	; 32
    2620:	51 e4       	ldi	r21, 0x41	; 65
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8e 01       	movw	r16, r28
    262c:	03 55       	subi	r16, 0x53	; 83
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	f8 01       	movw	r30, r16
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
    2642:	1f c0       	rjmp	.+62     	; 0x2682 <main+0x1ae>
    2644:	fe 01       	movw	r30, r28
    2646:	e5 55       	subi	r30, 0x55	; 85
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	fe 01       	movw	r30, r28
    2654:	e5 55       	subi	r30, 0x55	; 85
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <main+0x188>
    2660:	fe 01       	movw	r30, r28
    2662:	e5 55       	subi	r30, 0x55	; 85
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	de 01       	movw	r26, r28
    266c:	a3 55       	subi	r26, 0x53	; 83
    266e:	bf 4f       	sbci	r27, 0xFF	; 255
    2670:	fe 01       	movw	r30, r28
    2672:	e3 55       	subi	r30, 0x53	; 83
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	11 96       	adiw	r26, 0x01	; 1
    267e:	9c 93       	st	X, r25
    2680:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	fe 01       	movw	r30, r28
    2684:	e3 55       	subi	r30, 0x53	; 83
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	d1 f6       	brne	.-76     	; 0x2644 <main+0x170>
    2690:	28 c0       	rjmp	.+80     	; 0x26e2 <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	8e 01       	movw	r16, r28
    2694:	03 55       	subi	r16, 0x53	; 83
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	fe 01       	movw	r30, r28
    269a:	e1 55       	subi	r30, 0x51	; 81
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	f8 01       	movw	r30, r16
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	de 01       	movw	r26, r28
    26b6:	a7 55       	subi	r26, 0x57	; 87
    26b8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ba:	fe 01       	movw	r30, r28
    26bc:	e3 55       	subi	r30, 0x53	; 83
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	80 81       	ld	r24, Z
    26c2:	91 81       	ldd	r25, Z+1	; 0x01
    26c4:	11 96       	adiw	r26, 0x01	; 1
    26c6:	9c 93       	st	X, r25
    26c8:	8e 93       	st	-X, r24
    26ca:	fe 01       	movw	r30, r28
    26cc:	e7 55       	subi	r30, 0x57	; 87
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <main+0x200>
    26d8:	fe 01       	movw	r30, r28
    26da:	e7 55       	subi	r30, 0x57	; 87
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
			_delay_ms(500);
			if(selection == '+'){
    26e2:	80 91 2b 01 	lds	r24, 0x012B
    26e6:	8b 32       	cpi	r24, 0x2B	; 43
    26e8:	09 f0       	breq	.+2      	; 0x26ec <main+0x218>
    26ea:	ff c3       	rjmp	.+2046   	; 0x2eea <main+0xa16>
				senduart(openclose);
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <senduart>
				LCD_clearScreen();
    26f2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
				LCD_displayString("plz enter pass:");
    26f6:	81 ea       	ldi	r24, 0xA1	; 161
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
				LCD_moveCursor(1,0);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
				askPassword(password);
    2706:	ce 01       	movw	r24, r28
    2708:	82 54       	subi	r24, 0x42	; 66
    270a:	9f 4f       	sbci	r25, 0xFF	; 255
    270c:	0e 94 46 10 	call	0x208c	; 0x208c <askPassword>
				sendpassUART(password);
    2710:	ce 01       	movw	r24, r28
    2712:	82 54       	subi	r24, 0x42	; 66
    2714:	9f 4f       	sbci	r25, 0xFF	; 255
    2716:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <sendpassUART>
				status = receiveuart();
    271a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <receiveuart>
    271e:	80 93 2c 01 	sts	0x012C, r24
				if(!status){
    2722:	80 91 2c 01 	lds	r24, 0x012C
    2726:	88 23       	and	r24, r24
    2728:	09 f0       	breq	.+2      	; 0x272c <main+0x258>
    272a:	dc c3       	rjmp	.+1976   	; 0x2ee4 <main+0xa10>
    272c:	fe 01       	movw	r30, r28
    272e:	eb 55       	subi	r30, 0x5B	; 91
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e2       	ldi	r26, 0x20	; 32
    2738:	b1 e4       	ldi	r27, 0x41	; 65
    273a:	80 83       	st	Z, r24
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	a2 83       	std	Z+2, r26	; 0x02
    2740:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	8e 01       	movw	r16, r28
    2744:	0f 55       	subi	r16, 0x5F	; 95
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	fe 01       	movw	r30, r28
    274a:	eb 55       	subi	r30, 0x5B	; 91
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a ef       	ldi	r20, 0xFA	; 250
    275c:	54 e4       	ldi	r21, 0x44	; 68
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	80 83       	st	Z, r24
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	a2 83       	std	Z+2, r26	; 0x02
    276e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2770:	fe 01       	movw	r30, r28
    2772:	ef 55       	subi	r30, 0x5F	; 95
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	44 f4       	brge	.+16     	; 0x279e <main+0x2ca>
		__ticks = 1;
    278e:	fe 01       	movw	r30, r28
    2790:	e1 56       	subi	r30, 0x61	; 97
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	64 c0       	rjmp	.+200    	; 0x2866 <main+0x392>
	else if (__tmp > 65535)
    279e:	fe 01       	movw	r30, r28
    27a0:	ef 55       	subi	r30, 0x5F	; 95
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	0c f0       	brlt	.+2      	; 0x27be <main+0x2ea>
    27bc:	43 c0       	rjmp	.+134    	; 0x2844 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	fe 01       	movw	r30, r28
    27c0:	eb 55       	subi	r30, 0x5B	; 91
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	51 e4       	ldi	r21, 0x41	; 65
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	8e 01       	movw	r16, r28
    27de:	01 56       	subi	r16, 0x61	; 97
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	f8 01       	movw	r30, r16
    27f0:	91 83       	std	Z+1, r25	; 0x01
    27f2:	80 83       	st	Z, r24
    27f4:	1f c0       	rjmp	.+62     	; 0x2834 <main+0x360>
    27f6:	fe 01       	movw	r30, r28
    27f8:	e3 56       	subi	r30, 0x63	; 99
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
    2804:	fe 01       	movw	r30, r28
    2806:	e3 56       	subi	r30, 0x63	; 99
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <main+0x33a>
    2812:	fe 01       	movw	r30, r28
    2814:	e3 56       	subi	r30, 0x63	; 99
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	de 01       	movw	r26, r28
    281e:	a1 56       	subi	r26, 0x61	; 97
    2820:	bf 4f       	sbci	r27, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	e1 56       	subi	r30, 0x61	; 97
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	fe 01       	movw	r30, r28
    2836:	e1 56       	subi	r30, 0x61	; 97
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	d1 f6       	brne	.-76     	; 0x27f6 <main+0x322>
    2842:	27 c0       	rjmp	.+78     	; 0x2892 <main+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	8e 01       	movw	r16, r28
    2846:	01 56       	subi	r16, 0x61	; 97
    2848:	1f 4f       	sbci	r17, 0xFF	; 255
    284a:	fe 01       	movw	r30, r28
    284c:	ef 55       	subi	r30, 0x5F	; 95
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	de 01       	movw	r26, r28
    2868:	a5 56       	subi	r26, 0x65	; 101
    286a:	bf 4f       	sbci	r27, 0xFF	; 255
    286c:	fe 01       	movw	r30, r28
    286e:	e1 56       	subi	r30, 0x61	; 97
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	8d 93       	st	X+, r24
    2878:	9c 93       	st	X, r25
    287a:	fe 01       	movw	r30, r28
    287c:	e5 56       	subi	r30, 0x65	; 101
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <main+0x3b0>
    2888:	fe 01       	movw	r30, r28
    288a:	e5 56       	subi	r30, 0x65	; 101
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
					_delay_ms(10);
					senduart(wrongpasstryagain);
    2892:	84 e0       	ldi	r24, 0x04	; 4
    2894:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <senduart>
					LCD_clearScreen();
    2898:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    289c:	81 ea       	ldi	r24, 0xA1	; 161
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
					LCD_moveCursor(1,0);
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
					askPassword(password);
    28ac:	ce 01       	movw	r24, r28
    28ae:	82 54       	subi	r24, 0x42	; 66
    28b0:	9f 4f       	sbci	r25, 0xFF	; 255
    28b2:	0e 94 46 10 	call	0x208c	; 0x208c <askPassword>
    28b6:	fe 01       	movw	r30, r28
    28b8:	e9 56       	subi	r30, 0x69	; 105
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e2       	ldi	r26, 0x20	; 32
    28c2:	b1 e4       	ldi	r27, 0x41	; 65
    28c4:	80 83       	st	Z, r24
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	a2 83       	std	Z+2, r26	; 0x02
    28ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	8e 01       	movw	r16, r28
    28ce:	0d 56       	subi	r16, 0x6D	; 109
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	fe 01       	movw	r30, r28
    28d4:	e9 56       	subi	r30, 0x69	; 105
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a ef       	ldi	r20, 0xFA	; 250
    28e6:	54 e4       	ldi	r21, 0x44	; 68
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	f8 01       	movw	r30, r16
    28f2:	80 83       	st	Z, r24
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	a2 83       	std	Z+2, r26	; 0x02
    28f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fa:	fe 01       	movw	r30, r28
    28fc:	ed 56       	subi	r30, 0x6D	; 109
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	44 f4       	brge	.+16     	; 0x2928 <main+0x454>
		__ticks = 1;
    2918:	fe 01       	movw	r30, r28
    291a:	ef 56       	subi	r30, 0x6F	; 111
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
    2926:	64 c0       	rjmp	.+200    	; 0x29f0 <main+0x51c>
	else if (__tmp > 65535)
    2928:	fe 01       	movw	r30, r28
    292a:	ed 56       	subi	r30, 0x6D	; 109
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	60 81       	ld	r22, Z
    2930:	71 81       	ldd	r23, Z+1	; 0x01
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	3f ef       	ldi	r19, 0xFF	; 255
    293a:	4f e7       	ldi	r20, 0x7F	; 127
    293c:	57 e4       	ldi	r21, 0x47	; 71
    293e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2942:	18 16       	cp	r1, r24
    2944:	0c f0       	brlt	.+2      	; 0x2948 <main+0x474>
    2946:	43 c0       	rjmp	.+134    	; 0x29ce <main+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2948:	fe 01       	movw	r30, r28
    294a:	e9 56       	subi	r30, 0x69	; 105
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e2       	ldi	r20, 0x20	; 32
    295c:	51 e4       	ldi	r21, 0x41	; 65
    295e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8e 01       	movw	r16, r28
    2968:	0f 56       	subi	r16, 0x6F	; 111
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	f8 01       	movw	r30, r16
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	80 83       	st	Z, r24
    297e:	1f c0       	rjmp	.+62     	; 0x29be <main+0x4ea>
    2980:	fe 01       	movw	r30, r28
    2982:	e1 57       	subi	r30, 0x71	; 113
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	88 ec       	ldi	r24, 0xC8	; 200
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	80 83       	st	Z, r24
    298e:	fe 01       	movw	r30, r28
    2990:	e1 57       	subi	r30, 0x71	; 113
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <main+0x4c4>
    299c:	fe 01       	movw	r30, r28
    299e:	e1 57       	subi	r30, 0x71	; 113
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	de 01       	movw	r26, r28
    29a8:	af 56       	subi	r26, 0x6F	; 111
    29aa:	bf 4f       	sbci	r27, 0xFF	; 255
    29ac:	fe 01       	movw	r30, r28
    29ae:	ef 56       	subi	r30, 0x6F	; 111
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	11 96       	adiw	r26, 0x01	; 1
    29ba:	9c 93       	st	X, r25
    29bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	fe 01       	movw	r30, r28
    29c0:	ef 56       	subi	r30, 0x6F	; 111
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	d1 f6       	brne	.-76     	; 0x2980 <main+0x4ac>
    29cc:	27 c0       	rjmp	.+78     	; 0x2a1c <main+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ce:	8e 01       	movw	r16, r28
    29d0:	0f 56       	subi	r16, 0x6F	; 111
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 56       	subi	r30, 0x6D	; 109
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	f8 01       	movw	r30, r16
    29ec:	91 83       	std	Z+1, r25	; 0x01
    29ee:	80 83       	st	Z, r24
    29f0:	de 01       	movw	r26, r28
    29f2:	a3 57       	subi	r26, 0x73	; 115
    29f4:	bf 4f       	sbci	r27, 0xFF	; 255
    29f6:	fe 01       	movw	r30, r28
    29f8:	ef 56       	subi	r30, 0x6F	; 111
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	80 81       	ld	r24, Z
    29fe:	91 81       	ldd	r25, Z+1	; 0x01
    2a00:	8d 93       	st	X+, r24
    2a02:	9c 93       	st	X, r25
    2a04:	fe 01       	movw	r30, r28
    2a06:	e3 57       	subi	r30, 0x73	; 115
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <main+0x53a>
    2a12:	fe 01       	movw	r30, r28
    2a14:	e3 57       	subi	r30, 0x73	; 115
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	80 83       	st	Z, r24
					_delay_ms(10);
					sendpassUART(password);
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	82 54       	subi	r24, 0x42	; 66
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <sendpassUART>
    2a26:	fe 01       	movw	r30, r28
    2a28:	e7 57       	subi	r30, 0x77	; 119
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a0 e7       	ldi	r26, 0x70	; 112
    2a32:	b2 e4       	ldi	r27, 0x42	; 66
    2a34:	80 83       	st	Z, r24
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	a2 83       	std	Z+2, r26	; 0x02
    2a3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3c:	8e 01       	movw	r16, r28
    2a3e:	0b 57       	subi	r16, 0x7B	; 123
    2a40:	1f 4f       	sbci	r17, 0xFF	; 255
    2a42:	fe 01       	movw	r30, r28
    2a44:	e7 57       	subi	r30, 0x77	; 119
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	60 81       	ld	r22, Z
    2a4a:	71 81       	ldd	r23, Z+1	; 0x01
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4a ef       	ldi	r20, 0xFA	; 250
    2a56:	54 e4       	ldi	r21, 0x44	; 68
    2a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	f8 01       	movw	r30, r16
    2a62:	80 83       	st	Z, r24
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	a2 83       	std	Z+2, r26	; 0x02
    2a68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	eb 57       	subi	r30, 0x7B	; 123
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	60 81       	ld	r22, Z
    2a72:	71 81       	ldd	r23, Z+1	; 0x01
    2a74:	82 81       	ldd	r24, Z+2	; 0x02
    2a76:	93 81       	ldd	r25, Z+3	; 0x03
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e8       	ldi	r20, 0x80	; 128
    2a7e:	5f e3       	ldi	r21, 0x3F	; 63
    2a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a84:	88 23       	and	r24, r24
    2a86:	44 f4       	brge	.+16     	; 0x2a98 <main+0x5c4>
		__ticks = 1;
    2a88:	fe 01       	movw	r30, r28
    2a8a:	ed 57       	subi	r30, 0x7D	; 125
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	80 83       	st	Z, r24
    2a96:	64 c0       	rjmp	.+200    	; 0x2b60 <main+0x68c>
	else if (__tmp > 65535)
    2a98:	fe 01       	movw	r30, r28
    2a9a:	eb 57       	subi	r30, 0x7B	; 123
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	60 81       	ld	r22, Z
    2aa0:	71 81       	ldd	r23, Z+1	; 0x01
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	93 81       	ldd	r25, Z+3	; 0x03
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	3f ef       	ldi	r19, 0xFF	; 255
    2aaa:	4f e7       	ldi	r20, 0x7F	; 127
    2aac:	57 e4       	ldi	r21, 0x47	; 71
    2aae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab2:	18 16       	cp	r1, r24
    2ab4:	0c f0       	brlt	.+2      	; 0x2ab8 <main+0x5e4>
    2ab6:	43 c0       	rjmp	.+134    	; 0x2b3e <main+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e7 57       	subi	r30, 0x77	; 119
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e2       	ldi	r20, 0x20	; 32
    2acc:	51 e4       	ldi	r21, 0x41	; 65
    2ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	8e 01       	movw	r16, r28
    2ad8:	0d 57       	subi	r16, 0x7D	; 125
    2ada:	1f 4f       	sbci	r17, 0xFF	; 255
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	f8 01       	movw	r30, r16
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
    2aee:	1f c0       	rjmp	.+62     	; 0x2b2e <main+0x65a>
    2af0:	fe 01       	movw	r30, r28
    2af2:	ef 57       	subi	r30, 0x7F	; 127
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	88 ec       	ldi	r24, 0xC8	; 200
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	80 83       	st	Z, r24
    2afe:	fe 01       	movw	r30, r28
    2b00:	ef 57       	subi	r30, 0x7F	; 127
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <main+0x634>
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ef 57       	subi	r30, 0x7F	; 127
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	de 01       	movw	r26, r28
    2b18:	ad 57       	subi	r26, 0x7D	; 125
    2b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	ed 57       	subi	r30, 0x7D	; 125
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	11 96       	adiw	r26, 0x01	; 1
    2b2a:	9c 93       	st	X, r25
    2b2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ed 57       	subi	r30, 0x7D	; 125
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	d1 f6       	brne	.-76     	; 0x2af0 <main+0x61c>
    2b3c:	27 c0       	rjmp	.+78     	; 0x2b8c <main+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3e:	8e 01       	movw	r16, r28
    2b40:	0d 57       	subi	r16, 0x7D	; 125
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	fe 01       	movw	r30, r28
    2b46:	eb 57       	subi	r30, 0x7B	; 123
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	60 81       	ld	r22, Z
    2b4c:	71 81       	ldd	r23, Z+1	; 0x01
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	93 81       	ldd	r25, Z+3	; 0x03
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
    2b60:	de 01       	movw	r26, r28
    2b62:	a1 58       	subi	r26, 0x81	; 129
    2b64:	bf 4f       	sbci	r27, 0xFF	; 255
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 57       	subi	r30, 0x7D	; 125
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	8d 93       	st	X+, r24
    2b72:	9c 93       	st	X, r25
    2b74:	fe 01       	movw	r30, r28
    2b76:	e1 58       	subi	r30, 0x81	; 129
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 81       	ld	r24, Z
    2b7c:	91 81       	ldd	r25, Z+1	; 0x01
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <main+0x6aa>
    2b82:	fe 01       	movw	r30, r28
    2b84:	e1 58       	subi	r30, 0x81	; 129
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	80 83       	st	Z, r24
					_delay_ms(60);
					status = receiveuart();
    2b8c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <receiveuart>
    2b90:	80 93 2c 01 	sts	0x012C, r24
					if(!status){
    2b94:	80 91 2c 01 	lds	r24, 0x012C
    2b98:	88 23       	and	r24, r24
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <main+0x6ca>
    2b9c:	a0 c1       	rjmp	.+832    	; 0x2ede <main+0xa0a>
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e5 58       	subi	r30, 0x85	; 133
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e2       	ldi	r26, 0x20	; 32
    2baa:	b1 e4       	ldi	r27, 0x41	; 65
    2bac:	80 83       	st	Z, r24
    2bae:	91 83       	std	Z+1, r25	; 0x01
    2bb0:	a2 83       	std	Z+2, r26	; 0x02
    2bb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb4:	8e 01       	movw	r16, r28
    2bb6:	09 58       	subi	r16, 0x89	; 137
    2bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e5 58       	subi	r30, 0x85	; 133
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	60 81       	ld	r22, Z
    2bc2:	71 81       	ldd	r23, Z+1	; 0x01
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	4a ef       	ldi	r20, 0xFA	; 250
    2bce:	54 e4       	ldi	r21, 0x44	; 68
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	f8 01       	movw	r30, r16
    2bda:	80 83       	st	Z, r24
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	a2 83       	std	Z+2, r26	; 0x02
    2be0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2be2:	fe 01       	movw	r30, r28
    2be4:	e9 58       	subi	r30, 0x89	; 137
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	60 81       	ld	r22, Z
    2bea:	71 81       	ldd	r23, Z+1	; 0x01
    2bec:	82 81       	ldd	r24, Z+2	; 0x02
    2bee:	93 81       	ldd	r25, Z+3	; 0x03
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e8       	ldi	r20, 0x80	; 128
    2bf6:	5f e3       	ldi	r21, 0x3F	; 63
    2bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfc:	88 23       	and	r24, r24
    2bfe:	44 f4       	brge	.+16     	; 0x2c10 <main+0x73c>
		__ticks = 1;
    2c00:	fe 01       	movw	r30, r28
    2c02:	eb 58       	subi	r30, 0x8B	; 139
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
    2c0e:	64 c0       	rjmp	.+200    	; 0x2cd8 <main+0x804>
	else if (__tmp > 65535)
    2c10:	fe 01       	movw	r30, r28
    2c12:	e9 58       	subi	r30, 0x89	; 137
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	60 81       	ld	r22, Z
    2c18:	71 81       	ldd	r23, Z+1	; 0x01
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	3f ef       	ldi	r19, 0xFF	; 255
    2c22:	4f e7       	ldi	r20, 0x7F	; 127
    2c24:	57 e4       	ldi	r21, 0x47	; 71
    2c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2a:	18 16       	cp	r1, r24
    2c2c:	0c f0       	brlt	.+2      	; 0x2c30 <main+0x75c>
    2c2e:	43 c0       	rjmp	.+134    	; 0x2cb6 <main+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c30:	fe 01       	movw	r30, r28
    2c32:	e5 58       	subi	r30, 0x85	; 133
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	60 81       	ld	r22, Z
    2c38:	71 81       	ldd	r23, Z+1	; 0x01
    2c3a:	82 81       	ldd	r24, Z+2	; 0x02
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e2       	ldi	r20, 0x20	; 32
    2c44:	51 e4       	ldi	r21, 0x41	; 65
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	8e 01       	movw	r16, r28
    2c50:	0b 58       	subi	r16, 0x8B	; 139
    2c52:	1f 4f       	sbci	r17, 0xFF	; 255
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	f8 01       	movw	r30, r16
    2c62:	91 83       	std	Z+1, r25	; 0x01
    2c64:	80 83       	st	Z, r24
    2c66:	1f c0       	rjmp	.+62     	; 0x2ca6 <main+0x7d2>
    2c68:	fe 01       	movw	r30, r28
    2c6a:	ed 58       	subi	r30, 0x8D	; 141
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
    2c76:	fe 01       	movw	r30, r28
    2c78:	ed 58       	subi	r30, 0x8D	; 141
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	91 81       	ldd	r25, Z+1	; 0x01
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <main+0x7ac>
    2c84:	fe 01       	movw	r30, r28
    2c86:	ed 58       	subi	r30, 0x8D	; 141
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8e:	de 01       	movw	r26, r28
    2c90:	ab 58       	subi	r26, 0x8B	; 139
    2c92:	bf 4f       	sbci	r27, 0xFF	; 255
    2c94:	fe 01       	movw	r30, r28
    2c96:	eb 58       	subi	r30, 0x8B	; 139
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	11 96       	adiw	r26, 0x01	; 1
    2ca2:	9c 93       	st	X, r25
    2ca4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	eb 58       	subi	r30, 0x8B	; 139
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	d1 f6       	brne	.-76     	; 0x2c68 <main+0x794>
    2cb4:	27 c0       	rjmp	.+78     	; 0x2d04 <main+0x830>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb6:	8e 01       	movw	r16, r28
    2cb8:	0b 58       	subi	r16, 0x8B	; 139
    2cba:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e9 58       	subi	r30, 0x89	; 137
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	80 83       	st	Z, r24
    2cd8:	de 01       	movw	r26, r28
    2cda:	af 58       	subi	r26, 0x8F	; 143
    2cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	eb 58       	subi	r30, 0x8B	; 139
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	8d 93       	st	X+, r24
    2cea:	9c 93       	st	X, r25
    2cec:	fe 01       	movw	r30, r28
    2cee:	ef 58       	subi	r30, 0x8F	; 143
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <main+0x822>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ef 58       	subi	r30, 0x8F	; 143
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
						_delay_ms(10);
						senduart(wrongpasstryagain);
    2d04:	84 e0       	ldi	r24, 0x04	; 4
    2d06:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <senduart>
						LCD_clearScreen();
    2d0a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
						LCD_displayString("plz enter pass:");
    2d0e:	81 ea       	ldi	r24, 0xA1	; 161
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
						LCD_moveCursor(1,0);
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
						askPassword(password);
    2d1e:	ce 01       	movw	r24, r28
    2d20:	82 54       	subi	r24, 0x42	; 66
    2d22:	9f 4f       	sbci	r25, 0xFF	; 255
    2d24:	0e 94 46 10 	call	0x208c	; 0x208c <askPassword>
						sendpassUART(password);
    2d28:	ce 01       	movw	r24, r28
    2d2a:	82 54       	subi	r24, 0x42	; 66
    2d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <sendpassUART>
						status = receiveuart();
    2d32:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <receiveuart>
    2d36:	80 93 2c 01 	sts	0x012C, r24
						if(!status){
    2d3a:	80 91 2c 01 	lds	r24, 0x012C
    2d3e:	88 23       	and	r24, r24
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <main+0x870>
    2d42:	ca c0       	rjmp	.+404    	; 0x2ed8 <main+0xa04>
    2d44:	fe 01       	movw	r30, r28
    2d46:	e3 59       	subi	r30, 0x93	; 147
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	a0 ea       	ldi	r26, 0xA0	; 160
    2d50:	b1 e4       	ldi	r27, 0x41	; 65
    2d52:	80 83       	st	Z, r24
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	a2 83       	std	Z+2, r26	; 0x02
    2d58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5a:	8e 01       	movw	r16, r28
    2d5c:	07 59       	subi	r16, 0x97	; 151
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	fe 01       	movw	r30, r28
    2d62:	e3 59       	subi	r30, 0x93	; 147
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	4a ef       	ldi	r20, 0xFA	; 250
    2d74:	54 e4       	ldi	r21, 0x44	; 68
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	f8 01       	movw	r30, r16
    2d80:	80 83       	st	Z, r24
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	a2 83       	std	Z+2, r26	; 0x02
    2d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e7 59       	subi	r30, 0x97	; 151
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	60 81       	ld	r22, Z
    2d90:	71 81       	ldd	r23, Z+1	; 0x01
    2d92:	82 81       	ldd	r24, Z+2	; 0x02
    2d94:	93 81       	ldd	r25, Z+3	; 0x03
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	44 f4       	brge	.+16     	; 0x2db6 <main+0x8e2>
		__ticks = 1;
    2da6:	fe 01       	movw	r30, r28
    2da8:	e9 59       	subi	r30, 0x99	; 153
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
    2db4:	64 c0       	rjmp	.+200    	; 0x2e7e <main+0x9aa>
	else if (__tmp > 65535)
    2db6:	fe 01       	movw	r30, r28
    2db8:	e7 59       	subi	r30, 0x97	; 151
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	3f ef       	ldi	r19, 0xFF	; 255
    2dc8:	4f e7       	ldi	r20, 0x7F	; 127
    2dca:	57 e4       	ldi	r21, 0x47	; 71
    2dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd0:	18 16       	cp	r1, r24
    2dd2:	0c f0       	brlt	.+2      	; 0x2dd6 <main+0x902>
    2dd4:	43 c0       	rjmp	.+134    	; 0x2e5c <main+0x988>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e3 59       	subi	r30, 0x93	; 147
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e2       	ldi	r20, 0x20	; 32
    2dea:	51 e4       	ldi	r21, 0x41	; 65
    2dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	8e 01       	movw	r16, r28
    2df6:	09 59       	subi	r16, 0x99	; 153
    2df8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	80 83       	st	Z, r24
    2e0c:	1f c0       	rjmp	.+62     	; 0x2e4c <main+0x978>
    2e0e:	fe 01       	movw	r30, r28
    2e10:	eb 59       	subi	r30, 0x9B	; 155
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	88 ec       	ldi	r24, 0xC8	; 200
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	eb 59       	subi	r30, 0x9B	; 155
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <main+0x952>
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	eb 59       	subi	r30, 0x9B	; 155
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e34:	de 01       	movw	r26, r28
    2e36:	a9 59       	subi	r26, 0x99	; 153
    2e38:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e9 59       	subi	r30, 0x99	; 153
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	11 96       	adiw	r26, 0x01	; 1
    2e48:	9c 93       	st	X, r25
    2e4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e9 59       	subi	r30, 0x99	; 153
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	d1 f6       	brne	.-76     	; 0x2e0e <main+0x93a>
    2e5a:	27 c0       	rjmp	.+78     	; 0x2eaa <main+0x9d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5c:	8e 01       	movw	r16, r28
    2e5e:	09 59       	subi	r16, 0x99	; 153
    2e60:	1f 4f       	sbci	r17, 0xFF	; 255
    2e62:	fe 01       	movw	r30, r28
    2e64:	e7 59       	subi	r30, 0x97	; 151
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	f8 01       	movw	r30, r16
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
    2e7e:	de 01       	movw	r26, r28
    2e80:	ad 59       	subi	r26, 0x9D	; 157
    2e82:	bf 4f       	sbci	r27, 0xFF	; 255
    2e84:	fe 01       	movw	r30, r28
    2e86:	e9 59       	subi	r30, 0x99	; 153
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	8d 93       	st	X+, r24
    2e90:	9c 93       	st	X, r25
    2e92:	fe 01       	movw	r30, r28
    2e94:	ed 59       	subi	r30, 0x9D	; 157
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	f1 f7       	brne	.-4      	; 0x2e9c <main+0x9c8>
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ed 59       	subi	r30, 0x9D	; 157
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	80 83       	st	Z, r24
							_delay_ms(20);
							senduart(buzzerlock);
    2eaa:	86 e0       	ldi	r24, 0x06	; 6
    2eac:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <senduart>
							LCD_clearScreen();
    2eb0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
							LCD_displayStringRowColumn(0,0,"ERROR, wrong");
    2eb4:	2b ee       	ldi	r18, 0xEB	; 235
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	a9 01       	movw	r20, r18
    2ebe:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1,0,"attempts");
    2ec2:	28 ef       	ldi	r18, 0xF8	; 248
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	a9 01       	movw	r20, r18
    2ecc:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <LCD_displayStringRowColumn>
							delay_seconds(12);
    2ed0:	8c e0       	ldi	r24, 0x0C	; 12
    2ed2:	0e 94 85 11 	call	0x230a	; 0x230a <delay_seconds>
    2ed6:	36 c4       	rjmp	.+2156   	; 0x3744 <main+0x1270>

						}
						else{
							dooropen();
    2ed8:	0e 94 60 11 	call	0x22c0	; 0x22c0 <dooropen>
    2edc:	33 c4       	rjmp	.+2150   	; 0x3744 <main+0x1270>
						}
					}
					else{
						dooropen();
    2ede:	0e 94 60 11 	call	0x22c0	; 0x22c0 <dooropen>
    2ee2:	30 c4       	rjmp	.+2144   	; 0x3744 <main+0x1270>
					}

				}
				else{
					dooropen();
    2ee4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <dooropen>
    2ee8:	2d c4       	rjmp	.+2138   	; 0x3744 <main+0x1270>

				}
			}
			else if(selection == '-'){
    2eea:	80 91 2b 01 	lds	r24, 0x012B
    2eee:	8d 32       	cpi	r24, 0x2D	; 45
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <main+0xa20>
    2ef2:	28 c4       	rjmp	.+2128   	; 0x3744 <main+0x1270>
				senduart(passwordchange);
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <senduart>
				LCD_clearScreen();
    2efa:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
				LCD_displayString("plz enter pass:");
    2efe:	81 ea       	ldi	r24, 0xA1	; 161
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
				LCD_moveCursor(1,0);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
				askPassword(password);
    2f0e:	ce 01       	movw	r24, r28
    2f10:	82 54       	subi	r24, 0x42	; 66
    2f12:	9f 4f       	sbci	r25, 0xFF	; 255
    2f14:	0e 94 46 10 	call	0x208c	; 0x208c <askPassword>
				sendpassUART(password);
    2f18:	ce 01       	movw	r24, r28
    2f1a:	82 54       	subi	r24, 0x42	; 66
    2f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <sendpassUART>
				status = receiveuart();
    2f22:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <receiveuart>
    2f26:	80 93 2c 01 	sts	0x012C, r24
				if(!status){
    2f2a:	80 91 2c 01 	lds	r24, 0x012C
    2f2e:	88 23       	and	r24, r24
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <main+0xa60>
    2f32:	06 c4       	rjmp	.+2060   	; 0x3740 <main+0x126c>
    2f34:	fe 01       	movw	r30, r28
    2f36:	e1 5a       	subi	r30, 0xA1	; 161
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	a0 e2       	ldi	r26, 0x20	; 32
    2f40:	b1 e4       	ldi	r27, 0x41	; 65
    2f42:	80 83       	st	Z, r24
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	a2 83       	std	Z+2, r26	; 0x02
    2f48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4a:	8e 01       	movw	r16, r28
    2f4c:	05 5a       	subi	r16, 0xA5	; 165
    2f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f50:	fe 01       	movw	r30, r28
    2f52:	e1 5a       	subi	r30, 0xA1	; 161
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	60 81       	ld	r22, Z
    2f58:	71 81       	ldd	r23, Z+1	; 0x01
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	f8 01       	movw	r30, r16
    2f70:	80 83       	st	Z, r24
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	a2 83       	std	Z+2, r26	; 0x02
    2f76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e5 5a       	subi	r30, 0xA5	; 165
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e8       	ldi	r20, 0x80	; 128
    2f8c:	5f e3       	ldi	r21, 0x3F	; 63
    2f8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f92:	88 23       	and	r24, r24
    2f94:	44 f4       	brge	.+16     	; 0x2fa6 <main+0xad2>
		__ticks = 1;
    2f96:	fe 01       	movw	r30, r28
    2f98:	e7 5a       	subi	r30, 0xA7	; 167
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
    2fa4:	64 c0       	rjmp	.+200    	; 0x306e <main+0xb9a>
	else if (__tmp > 65535)
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e5 5a       	subi	r30, 0xA5	; 165
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	3f ef       	ldi	r19, 0xFF	; 255
    2fb8:	4f e7       	ldi	r20, 0x7F	; 127
    2fba:	57 e4       	ldi	r21, 0x47	; 71
    2fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc0:	18 16       	cp	r1, r24
    2fc2:	0c f0       	brlt	.+2      	; 0x2fc6 <main+0xaf2>
    2fc4:	43 c0       	rjmp	.+134    	; 0x304c <main+0xb78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e1 5a       	subi	r30, 0xA1	; 161
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e2       	ldi	r20, 0x20	; 32
    2fda:	51 e4       	ldi	r21, 0x41	; 65
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	8e 01       	movw	r16, r28
    2fe6:	07 5a       	subi	r16, 0xA7	; 167
    2fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fea:	bc 01       	movw	r22, r24
    2fec:	cd 01       	movw	r24, r26
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	f8 01       	movw	r30, r16
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	80 83       	st	Z, r24
    2ffc:	1f c0       	rjmp	.+62     	; 0x303c <main+0xb68>
    2ffe:	fe 01       	movw	r30, r28
    3000:	e9 5a       	subi	r30, 0xA9	; 169
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	88 ec       	ldi	r24, 0xC8	; 200
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	91 83       	std	Z+1, r25	; 0x01
    300a:	80 83       	st	Z, r24
    300c:	fe 01       	movw	r30, r28
    300e:	e9 5a       	subi	r30, 0xA9	; 169
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <main+0xb42>
    301a:	fe 01       	movw	r30, r28
    301c:	e9 5a       	subi	r30, 0xA9	; 169
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3024:	de 01       	movw	r26, r28
    3026:	a7 5a       	subi	r26, 0xA7	; 167
    3028:	bf 4f       	sbci	r27, 0xFF	; 255
    302a:	fe 01       	movw	r30, r28
    302c:	e7 5a       	subi	r30, 0xA7	; 167
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	80 81       	ld	r24, Z
    3032:	91 81       	ldd	r25, Z+1	; 0x01
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	11 96       	adiw	r26, 0x01	; 1
    3038:	9c 93       	st	X, r25
    303a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303c:	fe 01       	movw	r30, r28
    303e:	e7 5a       	subi	r30, 0xA7	; 167
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	d1 f6       	brne	.-76     	; 0x2ffe <main+0xb2a>
    304a:	27 c0       	rjmp	.+78     	; 0x309a <main+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304c:	8e 01       	movw	r16, r28
    304e:	07 5a       	subi	r16, 0xA7	; 167
    3050:	1f 4f       	sbci	r17, 0xFF	; 255
    3052:	fe 01       	movw	r30, r28
    3054:	e5 5a       	subi	r30, 0xA5	; 165
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	f8 01       	movw	r30, r16
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	80 83       	st	Z, r24
    306e:	de 01       	movw	r26, r28
    3070:	ab 5a       	subi	r26, 0xAB	; 171
    3072:	bf 4f       	sbci	r27, 0xFF	; 255
    3074:	fe 01       	movw	r30, r28
    3076:	e7 5a       	subi	r30, 0xA7	; 167
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	80 81       	ld	r24, Z
    307c:	91 81       	ldd	r25, Z+1	; 0x01
    307e:	8d 93       	st	X+, r24
    3080:	9c 93       	st	X, r25
    3082:	fe 01       	movw	r30, r28
    3084:	eb 5a       	subi	r30, 0xAB	; 171
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <main+0xbb8>
    3090:	fe 01       	movw	r30, r28
    3092:	eb 5a       	subi	r30, 0xAB	; 171
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
					_delay_ms(10);
					senduart(wrongpasstryagainchange);
    309a:	85 e0       	ldi	r24, 0x05	; 5
    309c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <senduart>
					LCD_clearScreen();
    30a0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    30a4:	81 ea       	ldi	r24, 0xA1	; 161
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
					LCD_moveCursor(1,0);
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
					askPassword(password);
    30b4:	ce 01       	movw	r24, r28
    30b6:	82 54       	subi	r24, 0x42	; 66
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	0e 94 46 10 	call	0x208c	; 0x208c <askPassword>
    30be:	fe 01       	movw	r30, r28
    30c0:	ef 5a       	subi	r30, 0xAF	; 175
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a0 e2       	ldi	r26, 0x20	; 32
    30ca:	b1 e4       	ldi	r27, 0x41	; 65
    30cc:	80 83       	st	Z, r24
    30ce:	91 83       	std	Z+1, r25	; 0x01
    30d0:	a2 83       	std	Z+2, r26	; 0x02
    30d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d4:	8e 01       	movw	r16, r28
    30d6:	03 5b       	subi	r16, 0xB3	; 179
    30d8:	1f 4f       	sbci	r17, 0xFF	; 255
    30da:	fe 01       	movw	r30, r28
    30dc:	ef 5a       	subi	r30, 0xAF	; 175
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	60 81       	ld	r22, Z
    30e2:	71 81       	ldd	r23, Z+1	; 0x01
    30e4:	82 81       	ldd	r24, Z+2	; 0x02
    30e6:	93 81       	ldd	r25, Z+3	; 0x03
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a ef       	ldi	r20, 0xFA	; 250
    30ee:	54 e4       	ldi	r21, 0x44	; 68
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	f8 01       	movw	r30, r16
    30fa:	80 83       	st	Z, r24
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	a2 83       	std	Z+2, r26	; 0x02
    3100:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3102:	fe 01       	movw	r30, r28
    3104:	e3 5b       	subi	r30, 0xB3	; 179
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	44 f4       	brge	.+16     	; 0x3130 <main+0xc5c>
		__ticks = 1;
    3120:	fe 01       	movw	r30, r28
    3122:	e5 5b       	subi	r30, 0xB5	; 181
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
    312e:	64 c0       	rjmp	.+200    	; 0x31f8 <main+0xd24>
	else if (__tmp > 65535)
    3130:	fe 01       	movw	r30, r28
    3132:	e3 5b       	subi	r30, 0xB3	; 179
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	3f ef       	ldi	r19, 0xFF	; 255
    3142:	4f e7       	ldi	r20, 0x7F	; 127
    3144:	57 e4       	ldi	r21, 0x47	; 71
    3146:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    314a:	18 16       	cp	r1, r24
    314c:	0c f0       	brlt	.+2      	; 0x3150 <main+0xc7c>
    314e:	43 c0       	rjmp	.+134    	; 0x31d6 <main+0xd02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3150:	fe 01       	movw	r30, r28
    3152:	ef 5a       	subi	r30, 0xAF	; 175
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	60 81       	ld	r22, Z
    3158:	71 81       	ldd	r23, Z+1	; 0x01
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e2       	ldi	r20, 0x20	; 32
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	8e 01       	movw	r16, r28
    3170:	05 5b       	subi	r16, 0xB5	; 181
    3172:	1f 4f       	sbci	r17, 0xFF	; 255
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	f8 01       	movw	r30, r16
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	80 83       	st	Z, r24
    3186:	1f c0       	rjmp	.+62     	; 0x31c6 <main+0xcf2>
    3188:	fe 01       	movw	r30, r28
    318a:	e7 5b       	subi	r30, 0xB7	; 183
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	88 ec       	ldi	r24, 0xC8	; 200
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	80 83       	st	Z, r24
    3196:	fe 01       	movw	r30, r28
    3198:	e7 5b       	subi	r30, 0xB7	; 183
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <main+0xccc>
    31a4:	fe 01       	movw	r30, r28
    31a6:	e7 5b       	subi	r30, 0xB7	; 183
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ae:	de 01       	movw	r26, r28
    31b0:	a5 5b       	subi	r26, 0xB5	; 181
    31b2:	bf 4f       	sbci	r27, 0xFF	; 255
    31b4:	fe 01       	movw	r30, r28
    31b6:	e5 5b       	subi	r30, 0xB5	; 181
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	11 96       	adiw	r26, 0x01	; 1
    31c2:	9c 93       	st	X, r25
    31c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c6:	fe 01       	movw	r30, r28
    31c8:	e5 5b       	subi	r30, 0xB5	; 181
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	80 81       	ld	r24, Z
    31ce:	91 81       	ldd	r25, Z+1	; 0x01
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	d1 f6       	brne	.-76     	; 0x3188 <main+0xcb4>
    31d4:	27 c0       	rjmp	.+78     	; 0x3224 <main+0xd50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d6:	8e 01       	movw	r16, r28
    31d8:	05 5b       	subi	r16, 0xB5	; 181
    31da:	1f 4f       	sbci	r17, 0xFF	; 255
    31dc:	fe 01       	movw	r30, r28
    31de:	e3 5b       	subi	r30, 0xB3	; 179
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	f8 01       	movw	r30, r16
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	80 83       	st	Z, r24
    31f8:	de 01       	movw	r26, r28
    31fa:	a9 5b       	subi	r26, 0xB9	; 185
    31fc:	bf 4f       	sbci	r27, 0xFF	; 255
    31fe:	fe 01       	movw	r30, r28
    3200:	e5 5b       	subi	r30, 0xB5	; 181
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	80 81       	ld	r24, Z
    3206:	91 81       	ldd	r25, Z+1	; 0x01
    3208:	8d 93       	st	X+, r24
    320a:	9c 93       	st	X, r25
    320c:	fe 01       	movw	r30, r28
    320e:	e9 5b       	subi	r30, 0xB9	; 185
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <main+0xd42>
    321a:	fe 01       	movw	r30, r28
    321c:	e9 5b       	subi	r30, 0xB9	; 185
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	80 83       	st	Z, r24
					_delay_ms(10);
					sendpassUART(password);
    3224:	ce 01       	movw	r24, r28
    3226:	82 54       	subi	r24, 0x42	; 66
    3228:	9f 4f       	sbci	r25, 0xFF	; 255
    322a:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <sendpassUART>
    322e:	fe 01       	movw	r30, r28
    3230:	ed 5b       	subi	r30, 0xBD	; 189
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	a0 e7       	ldi	r26, 0x70	; 112
    323a:	b2 e4       	ldi	r27, 0x42	; 66
    323c:	80 83       	st	Z, r24
    323e:	91 83       	std	Z+1, r25	; 0x01
    3240:	a2 83       	std	Z+2, r26	; 0x02
    3242:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3244:	8e 01       	movw	r16, r28
    3246:	01 5c       	subi	r16, 0xC1	; 193
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	fe 01       	movw	r30, r28
    324c:	ed 5b       	subi	r30, 0xBD	; 189
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	60 81       	ld	r22, Z
    3252:	71 81       	ldd	r23, Z+1	; 0x01
    3254:	82 81       	ldd	r24, Z+2	; 0x02
    3256:	93 81       	ldd	r25, Z+3	; 0x03
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	4a ef       	ldi	r20, 0xFA	; 250
    325e:	54 e4       	ldi	r21, 0x44	; 68
    3260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	f8 01       	movw	r30, r16
    326a:	80 83       	st	Z, r24
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	a2 83       	std	Z+2, r26	; 0x02
    3270:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3272:	fe 01       	movw	r30, r28
    3274:	ff 96       	adiw	r30, 0x3f	; 63
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e8       	ldi	r20, 0x80	; 128
    3284:	5f e3       	ldi	r21, 0x3F	; 63
    3286:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    328a:	88 23       	and	r24, r24
    328c:	2c f4       	brge	.+10     	; 0x3298 <main+0xdc4>
		__ticks = 1;
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	9e af       	std	Y+62, r25	; 0x3e
    3294:	8d af       	std	Y+61, r24	; 0x3d
    3296:	46 c0       	rjmp	.+140    	; 0x3324 <main+0xe50>
	else if (__tmp > 65535)
    3298:	fe 01       	movw	r30, r28
    329a:	ff 96       	adiw	r30, 0x3f	; 63
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	4f e7       	ldi	r20, 0x7F	; 127
    32aa:	57 e4       	ldi	r21, 0x47	; 71
    32ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	64 f5       	brge	.+88     	; 0x330c <main+0xe38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b4:	fe 01       	movw	r30, r28
    32b6:	ed 5b       	subi	r30, 0xBD	; 189
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	60 81       	ld	r22, Z
    32bc:	71 81       	ldd	r23, Z+1	; 0x01
    32be:	82 81       	ldd	r24, Z+2	; 0x02
    32c0:	93 81       	ldd	r25, Z+3	; 0x03
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9e af       	std	Y+62, r25	; 0x3e
    32e0:	8d af       	std	Y+61, r24	; 0x3d
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <main+0xe2e>
    32e4:	88 ec       	ldi	r24, 0xC8	; 200
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9c af       	std	Y+60, r25	; 0x3c
    32ea:	8b af       	std	Y+59, r24	; 0x3b
    32ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    32ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <main+0xe1c>
    32f4:	9c af       	std	Y+60, r25	; 0x3c
    32f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    32fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9e af       	std	Y+62, r25	; 0x3e
    3300:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8d ad       	ldd	r24, Y+61	; 0x3d
    3304:	9e ad       	ldd	r25, Y+62	; 0x3e
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <main+0xe10>
    330a:	16 c0       	rjmp	.+44     	; 0x3338 <main+0xe64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	fe 01       	movw	r30, r28
    330e:	ff 96       	adiw	r30, 0x3f	; 63
    3310:	60 81       	ld	r22, Z
    3312:	71 81       	ldd	r23, Z+1	; 0x01
    3314:	82 81       	ldd	r24, Z+2	; 0x02
    3316:	93 81       	ldd	r25, Z+3	; 0x03
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9e af       	std	Y+62, r25	; 0x3e
    3322:	8d af       	std	Y+61, r24	; 0x3d
    3324:	8d ad       	ldd	r24, Y+61	; 0x3d
    3326:	9e ad       	ldd	r25, Y+62	; 0x3e
    3328:	9a af       	std	Y+58, r25	; 0x3a
    332a:	89 af       	std	Y+57, r24	; 0x39
    332c:	89 ad       	ldd	r24, Y+57	; 0x39
    332e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	f1 f7       	brne	.-4      	; 0x3330 <main+0xe5c>
    3334:	9a af       	std	Y+58, r25	; 0x3a
    3336:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(60);
					status = receiveuart();
    3338:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <receiveuart>
    333c:	80 93 2c 01 	sts	0x012C, r24
					if(!status){
    3340:	80 91 2c 01 	lds	r24, 0x012C
    3344:	88 23       	and	r24, r24
    3346:	09 f0       	breq	.+2      	; 0x334a <main+0xe76>
    3348:	f8 c1       	rjmp	.+1008   	; 0x373a <main+0x1266>
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	a0 e2       	ldi	r26, 0x20	; 32
    3350:	b1 e4       	ldi	r27, 0x41	; 65
    3352:	8d ab       	std	Y+53, r24	; 0x35
    3354:	9e ab       	std	Y+54, r25	; 0x36
    3356:	af ab       	std	Y+55, r26	; 0x37
    3358:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335a:	6d a9       	ldd	r22, Y+53	; 0x35
    335c:	7e a9       	ldd	r23, Y+54	; 0x36
    335e:	8f a9       	ldd	r24, Y+55	; 0x37
    3360:	98 ad       	ldd	r25, Y+56	; 0x38
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	4a ef       	ldi	r20, 0xFA	; 250
    3368:	54 e4       	ldi	r21, 0x44	; 68
    336a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	89 ab       	std	Y+49, r24	; 0x31
    3374:	9a ab       	std	Y+50, r25	; 0x32
    3376:	ab ab       	std	Y+51, r26	; 0x33
    3378:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    337a:	69 a9       	ldd	r22, Y+49	; 0x31
    337c:	7a a9       	ldd	r23, Y+50	; 0x32
    337e:	8b a9       	ldd	r24, Y+51	; 0x33
    3380:	9c a9       	ldd	r25, Y+52	; 0x34
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e8       	ldi	r20, 0x80	; 128
    3388:	5f e3       	ldi	r21, 0x3F	; 63
    338a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    338e:	88 23       	and	r24, r24
    3390:	2c f4       	brge	.+10     	; 0x339c <main+0xec8>
		__ticks = 1;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	98 ab       	std	Y+48, r25	; 0x30
    3398:	8f a7       	std	Y+47, r24	; 0x2f
    339a:	3f c0       	rjmp	.+126    	; 0x341a <main+0xf46>
	else if (__tmp > 65535)
    339c:	69 a9       	ldd	r22, Y+49	; 0x31
    339e:	7a a9       	ldd	r23, Y+50	; 0x32
    33a0:	8b a9       	ldd	r24, Y+51	; 0x33
    33a2:	9c a9       	ldd	r25, Y+52	; 0x34
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	3f ef       	ldi	r19, 0xFF	; 255
    33a8:	4f e7       	ldi	r20, 0x7F	; 127
    33aa:	57 e4       	ldi	r21, 0x47	; 71
    33ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33b0:	18 16       	cp	r1, r24
    33b2:	4c f5       	brge	.+82     	; 0x3406 <main+0xf32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b4:	6d a9       	ldd	r22, Y+53	; 0x35
    33b6:	7e a9       	ldd	r23, Y+54	; 0x36
    33b8:	8f a9       	ldd	r24, Y+55	; 0x37
    33ba:	98 ad       	ldd	r25, Y+56	; 0x38
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e2       	ldi	r20, 0x20	; 32
    33c2:	51 e4       	ldi	r21, 0x41	; 65
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	98 ab       	std	Y+48, r25	; 0x30
    33da:	8f a7       	std	Y+47, r24	; 0x2f
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <main+0xf28>
    33de:	88 ec       	ldi	r24, 0xC8	; 200
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	9e a7       	std	Y+46, r25	; 0x2e
    33e4:	8d a7       	std	Y+45, r24	; 0x2d
    33e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    33e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <main+0xf16>
    33ee:	9e a7       	std	Y+46, r25	; 0x2e
    33f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    33f4:	98 a9       	ldd	r25, Y+48	; 0x30
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	98 ab       	std	Y+48, r25	; 0x30
    33fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	69 f7       	brne	.-38     	; 0x33de <main+0xf0a>
    3404:	14 c0       	rjmp	.+40     	; 0x342e <main+0xf5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3406:	69 a9       	ldd	r22, Y+49	; 0x31
    3408:	7a a9       	ldd	r23, Y+50	; 0x32
    340a:	8b a9       	ldd	r24, Y+51	; 0x33
    340c:	9c a9       	ldd	r25, Y+52	; 0x34
    340e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	98 ab       	std	Y+48, r25	; 0x30
    3418:	8f a7       	std	Y+47, r24	; 0x2f
    341a:	8f a5       	ldd	r24, Y+47	; 0x2f
    341c:	98 a9       	ldd	r25, Y+48	; 0x30
    341e:	9c a7       	std	Y+44, r25	; 0x2c
    3420:	8b a7       	std	Y+43, r24	; 0x2b
    3422:	8b a5       	ldd	r24, Y+43	; 0x2b
    3424:	9c a5       	ldd	r25, Y+44	; 0x2c
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <main+0xf52>
    342a:	9c a7       	std	Y+44, r25	; 0x2c
    342c:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(10);
						senduart(wrongpasstryagainchange);
    342e:	85 e0       	ldi	r24, 0x05	; 5
    3430:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <senduart>
						LCD_clearScreen();
    3434:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
						LCD_displayString("plz enter pass:");
    3438:	81 ea       	ldi	r24, 0xA1	; 161
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
						LCD_moveCursor(1,0);
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_moveCursor>
						askPassword(password);
    3448:	ce 01       	movw	r24, r28
    344a:	82 54       	subi	r24, 0x42	; 66
    344c:	9f 4f       	sbci	r25, 0xFF	; 255
    344e:	0e 94 46 10 	call	0x208c	; 0x208c <askPassword>
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	a0 e2       	ldi	r26, 0x20	; 32
    3458:	b1 e4       	ldi	r27, 0x41	; 65
    345a:	8f a3       	std	Y+39, r24	; 0x27
    345c:	98 a7       	std	Y+40, r25	; 0x28
    345e:	a9 a7       	std	Y+41, r26	; 0x29
    3460:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3462:	6f a1       	ldd	r22, Y+39	; 0x27
    3464:	78 a5       	ldd	r23, Y+40	; 0x28
    3466:	89 a5       	ldd	r24, Y+41	; 0x29
    3468:	9a a5       	ldd	r25, Y+42	; 0x2a
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	4a ef       	ldi	r20, 0xFA	; 250
    3470:	54 e4       	ldi	r21, 0x44	; 68
    3472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	8b a3       	std	Y+35, r24	; 0x23
    347c:	9c a3       	std	Y+36, r25	; 0x24
    347e:	ad a3       	std	Y+37, r26	; 0x25
    3480:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3482:	6b a1       	ldd	r22, Y+35	; 0x23
    3484:	7c a1       	ldd	r23, Y+36	; 0x24
    3486:	8d a1       	ldd	r24, Y+37	; 0x25
    3488:	9e a1       	ldd	r25, Y+38	; 0x26
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e8       	ldi	r20, 0x80	; 128
    3490:	5f e3       	ldi	r21, 0x3F	; 63
    3492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3496:	88 23       	and	r24, r24
    3498:	2c f4       	brge	.+10     	; 0x34a4 <main+0xfd0>
		__ticks = 1;
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	9a a3       	std	Y+34, r25	; 0x22
    34a0:	89 a3       	std	Y+33, r24	; 0x21
    34a2:	3f c0       	rjmp	.+126    	; 0x3522 <main+0x104e>
	else if (__tmp > 65535)
    34a4:	6b a1       	ldd	r22, Y+35	; 0x23
    34a6:	7c a1       	ldd	r23, Y+36	; 0x24
    34a8:	8d a1       	ldd	r24, Y+37	; 0x25
    34aa:	9e a1       	ldd	r25, Y+38	; 0x26
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	3f ef       	ldi	r19, 0xFF	; 255
    34b0:	4f e7       	ldi	r20, 0x7F	; 127
    34b2:	57 e4       	ldi	r21, 0x47	; 71
    34b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34b8:	18 16       	cp	r1, r24
    34ba:	4c f5       	brge	.+82     	; 0x350e <main+0x103a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34bc:	6f a1       	ldd	r22, Y+39	; 0x27
    34be:	78 a5       	ldd	r23, Y+40	; 0x28
    34c0:	89 a5       	ldd	r24, Y+41	; 0x29
    34c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	40 e2       	ldi	r20, 0x20	; 32
    34ca:	51 e4       	ldi	r21, 0x41	; 65
    34cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	bc 01       	movw	r22, r24
    34d6:	cd 01       	movw	r24, r26
    34d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9a a3       	std	Y+34, r25	; 0x22
    34e2:	89 a3       	std	Y+33, r24	; 0x21
    34e4:	0f c0       	rjmp	.+30     	; 0x3504 <main+0x1030>
    34e6:	88 ec       	ldi	r24, 0xC8	; 200
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	98 a3       	std	Y+32, r25	; 0x20
    34ec:	8f 8f       	std	Y+31, r24	; 0x1f
    34ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34f0:	98 a1       	ldd	r25, Y+32	; 0x20
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <main+0x101e>
    34f6:	98 a3       	std	Y+32, r25	; 0x20
    34f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fa:	89 a1       	ldd	r24, Y+33	; 0x21
    34fc:	9a a1       	ldd	r25, Y+34	; 0x22
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	9a a3       	std	Y+34, r25	; 0x22
    3502:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3504:	89 a1       	ldd	r24, Y+33	; 0x21
    3506:	9a a1       	ldd	r25, Y+34	; 0x22
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	69 f7       	brne	.-38     	; 0x34e6 <main+0x1012>
    350c:	14 c0       	rjmp	.+40     	; 0x3536 <main+0x1062>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350e:	6b a1       	ldd	r22, Y+35	; 0x23
    3510:	7c a1       	ldd	r23, Y+36	; 0x24
    3512:	8d a1       	ldd	r24, Y+37	; 0x25
    3514:	9e a1       	ldd	r25, Y+38	; 0x26
    3516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	9a a3       	std	Y+34, r25	; 0x22
    3520:	89 a3       	std	Y+33, r24	; 0x21
    3522:	89 a1       	ldd	r24, Y+33	; 0x21
    3524:	9a a1       	ldd	r25, Y+34	; 0x22
    3526:	9e 8f       	std	Y+30, r25	; 0x1e
    3528:	8d 8f       	std	Y+29, r24	; 0x1d
    352a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    352c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <main+0x105a>
    3532:	9e 8f       	std	Y+30, r25	; 0x1e
    3534:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(10);
						sendpassUART(password);
    3536:	ce 01       	movw	r24, r28
    3538:	82 54       	subi	r24, 0x42	; 66
    353a:	9f 4f       	sbci	r25, 0xFF	; 255
    353c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <sendpassUART>
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e7       	ldi	r26, 0x70	; 112
    3546:	b2 e4       	ldi	r27, 0x42	; 66
    3548:	89 8f       	std	Y+25, r24	; 0x19
    354a:	9a 8f       	std	Y+26, r25	; 0x1a
    354c:	ab 8f       	std	Y+27, r26	; 0x1b
    354e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3550:	69 8d       	ldd	r22, Y+25	; 0x19
    3552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	4a ef       	ldi	r20, 0xFA	; 250
    355e:	54 e4       	ldi	r21, 0x44	; 68
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	8d 8b       	std	Y+21, r24	; 0x15
    356a:	9e 8b       	std	Y+22, r25	; 0x16
    356c:	af 8b       	std	Y+23, r26	; 0x17
    356e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3570:	6d 89       	ldd	r22, Y+21	; 0x15
    3572:	7e 89       	ldd	r23, Y+22	; 0x16
    3574:	8f 89       	ldd	r24, Y+23	; 0x17
    3576:	98 8d       	ldd	r25, Y+24	; 0x18
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e8       	ldi	r20, 0x80	; 128
    357e:	5f e3       	ldi	r21, 0x3F	; 63
    3580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3584:	88 23       	and	r24, r24
    3586:	2c f4       	brge	.+10     	; 0x3592 <main+0x10be>
		__ticks = 1;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 8b       	std	Y+20, r25	; 0x14
    358e:	8b 8b       	std	Y+19, r24	; 0x13
    3590:	3f c0       	rjmp	.+126    	; 0x3610 <main+0x113c>
	else if (__tmp > 65535)
    3592:	6d 89       	ldd	r22, Y+21	; 0x15
    3594:	7e 89       	ldd	r23, Y+22	; 0x16
    3596:	8f 89       	ldd	r24, Y+23	; 0x17
    3598:	98 8d       	ldd	r25, Y+24	; 0x18
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	57 e4       	ldi	r21, 0x47	; 71
    35a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a6:	18 16       	cp	r1, r24
    35a8:	4c f5       	brge	.+82     	; 0x35fc <main+0x1128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35aa:	69 8d       	ldd	r22, Y+25	; 0x19
    35ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e2       	ldi	r20, 0x20	; 32
    35b8:	51 e4       	ldi	r21, 0x41	; 65
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9c 8b       	std	Y+20, r25	; 0x14
    35d0:	8b 8b       	std	Y+19, r24	; 0x13
    35d2:	0f c0       	rjmp	.+30     	; 0x35f2 <main+0x111e>
    35d4:	88 ec       	ldi	r24, 0xC8	; 200
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9a 8b       	std	Y+18, r25	; 0x12
    35da:	89 8b       	std	Y+17, r24	; 0x11
    35dc:	89 89       	ldd	r24, Y+17	; 0x11
    35de:	9a 89       	ldd	r25, Y+18	; 0x12
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <main+0x110c>
    35e4:	9a 8b       	std	Y+18, r25	; 0x12
    35e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ea:	9c 89       	ldd	r25, Y+20	; 0x14
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	9c 8b       	std	Y+20, r25	; 0x14
    35f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f2:	8b 89       	ldd	r24, Y+19	; 0x13
    35f4:	9c 89       	ldd	r25, Y+20	; 0x14
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	69 f7       	brne	.-38     	; 0x35d4 <main+0x1100>
    35fa:	14 c0       	rjmp	.+40     	; 0x3624 <main+0x1150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fc:	6d 89       	ldd	r22, Y+21	; 0x15
    35fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3600:	8f 89       	ldd	r24, Y+23	; 0x17
    3602:	98 8d       	ldd	r25, Y+24	; 0x18
    3604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	9c 8b       	std	Y+20, r25	; 0x14
    360e:	8b 8b       	std	Y+19, r24	; 0x13
    3610:	8b 89       	ldd	r24, Y+19	; 0x13
    3612:	9c 89       	ldd	r25, Y+20	; 0x14
    3614:	98 8b       	std	Y+16, r25	; 0x10
    3616:	8f 87       	std	Y+15, r24	; 0x0f
    3618:	8f 85       	ldd	r24, Y+15	; 0x0f
    361a:	98 89       	ldd	r25, Y+16	; 0x10
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	f1 f7       	brne	.-4      	; 0x361c <main+0x1148>
    3620:	98 8b       	std	Y+16, r25	; 0x10
    3622:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(60);
						status = receiveuart();
    3624:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <receiveuart>
    3628:	80 93 2c 01 	sts	0x012C, r24
						if(!status){
    362c:	80 91 2c 01 	lds	r24, 0x012C
    3630:	88 23       	and	r24, r24
    3632:	09 f0       	breq	.+2      	; 0x3636 <main+0x1162>
    3634:	7f c0       	rjmp	.+254    	; 0x3734 <main+0x1260>
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	a0 ea       	ldi	r26, 0xA0	; 160
    363c:	b1 e4       	ldi	r27, 0x41	; 65
    363e:	8b 87       	std	Y+11, r24	; 0x0b
    3640:	9c 87       	std	Y+12, r25	; 0x0c
    3642:	ad 87       	std	Y+13, r26	; 0x0d
    3644:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3646:	6b 85       	ldd	r22, Y+11	; 0x0b
    3648:	7c 85       	ldd	r23, Y+12	; 0x0c
    364a:	8d 85       	ldd	r24, Y+13	; 0x0d
    364c:	9e 85       	ldd	r25, Y+14	; 0x0e
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	4a ef       	ldi	r20, 0xFA	; 250
    3654:	54 e4       	ldi	r21, 0x44	; 68
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	8f 83       	std	Y+7, r24	; 0x07
    3660:	98 87       	std	Y+8, r25	; 0x08
    3662:	a9 87       	std	Y+9, r26	; 0x09
    3664:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3666:	6f 81       	ldd	r22, Y+7	; 0x07
    3668:	78 85       	ldd	r23, Y+8	; 0x08
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e8       	ldi	r20, 0x80	; 128
    3674:	5f e3       	ldi	r21, 0x3F	; 63
    3676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    367a:	88 23       	and	r24, r24
    367c:	2c f4       	brge	.+10     	; 0x3688 <main+0x11b4>
		__ticks = 1;
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	9e 83       	std	Y+6, r25	; 0x06
    3684:	8d 83       	std	Y+5, r24	; 0x05
    3686:	3f c0       	rjmp	.+126    	; 0x3706 <main+0x1232>
	else if (__tmp > 65535)
    3688:	6f 81       	ldd	r22, Y+7	; 0x07
    368a:	78 85       	ldd	r23, Y+8	; 0x08
    368c:	89 85       	ldd	r24, Y+9	; 0x09
    368e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	3f ef       	ldi	r19, 0xFF	; 255
    3694:	4f e7       	ldi	r20, 0x7F	; 127
    3696:	57 e4       	ldi	r21, 0x47	; 71
    3698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    369c:	18 16       	cp	r1, r24
    369e:	4c f5       	brge	.+82     	; 0x36f2 <main+0x121e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e2       	ldi	r20, 0x20	; 32
    36ae:	51 e4       	ldi	r21, 0x41	; 65
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	bc 01       	movw	r22, r24
    36ba:	cd 01       	movw	r24, r26
    36bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	9e 83       	std	Y+6, r25	; 0x06
    36c6:	8d 83       	std	Y+5, r24	; 0x05
    36c8:	0f c0       	rjmp	.+30     	; 0x36e8 <main+0x1214>
    36ca:	88 ec       	ldi	r24, 0xC8	; 200
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	9c 83       	std	Y+4, r25	; 0x04
    36d0:	8b 83       	std	Y+3, r24	; 0x03
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	9c 81       	ldd	r25, Y+4	; 0x04
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <main+0x1202>
    36da:	9c 83       	std	Y+4, r25	; 0x04
    36dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36de:	8d 81       	ldd	r24, Y+5	; 0x05
    36e0:	9e 81       	ldd	r25, Y+6	; 0x06
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	9e 81       	ldd	r25, Y+6	; 0x06
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	69 f7       	brne	.-38     	; 0x36ca <main+0x11f6>
    36f0:	14 c0       	rjmp	.+40     	; 0x371a <main+0x1246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f2:	6f 81       	ldd	r22, Y+7	; 0x07
    36f4:	78 85       	ldd	r23, Y+8	; 0x08
    36f6:	89 85       	ldd	r24, Y+9	; 0x09
    36f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	9e 83       	std	Y+6, r25	; 0x06
    3704:	8d 83       	std	Y+5, r24	; 0x05
    3706:	8d 81       	ldd	r24, Y+5	; 0x05
    3708:	9e 81       	ldd	r25, Y+6	; 0x06
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <main+0x123e>
    3716:	9a 83       	std	Y+2, r25	; 0x02
    3718:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(20);
							senduart(buzzerlock);
    371a:	86 e0       	ldi	r24, 0x06	; 6
    371c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <senduart>
							LCD_clearScreen();
    3720:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_clearScreen>
							LCD_displayString("ERROR, wrong attempts");
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	91 e0       	ldi	r25, 0x01	; 1
    3728:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_displayString>
							delay_seconds(12);
    372c:	8c e0       	ldi	r24, 0x0C	; 12
    372e:	0e 94 85 11 	call	0x230a	; 0x230a <delay_seconds>
    3732:	08 c0       	rjmp	.+16     	; 0x3744 <main+0x1270>

						}
						else{
							passwordset = 0;
    3734:	10 92 2a 01 	sts	0x012A, r1
    3738:	05 c0       	rjmp	.+10     	; 0x3744 <main+0x1270>
							continue;
						}
					}
					else{
						passwordset = 0;
    373a:	10 92 2a 01 	sts	0x012A, r1
    373e:	02 c0       	rjmp	.+4      	; 0x3744 <main+0x1270>
						continue;
					}

				}
				else{
					passwordset = 0;
    3740:	10 92 2a 01 	sts	0x012A, r1
	createpass();
	while(1){
		if(passwordset == 0){
			createpass();
		}
		while(passwordset){
    3744:	80 91 2a 01 	lds	r24, 0x012A
    3748:	88 23       	and	r24, r24
    374a:	11 f0       	breq	.+4      	; 0x3750 <main+0x127c>
    374c:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <main+0x7e>
    3750:	0c 94 9f 12 	jmp	0x253e	; 0x253e <main+0x6a>

00003754 <Timer_init>:

static void (*Timer0_CallBackPtr)(void) = NULL_PTR;
static void (*Timer1_CallBackPtr)(void) = NULL_PTR;
static void (*Timer2_CallBackPtr)(void) = NULL_PTR;

void Timer_init(const Timer_ConfigType * Config_Ptr) {
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	00 d0       	rcall	.+0      	; 0x375a <Timer_init+0x6>
    375a:	00 d0       	rcall	.+0      	; 0x375c <Timer_init+0x8>
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	9a 83       	std	Y+2, r25	; 0x02
    3762:	89 83       	std	Y+1, r24	; 0x01
    switch (Config_Ptr->timer_ID) {
    3764:	e9 81       	ldd	r30, Y+1	; 0x01
    3766:	fa 81       	ldd	r31, Y+2	; 0x02
    3768:	84 81       	ldd	r24, Z+4	; 0x04
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	3c 83       	std	Y+4, r19	; 0x04
    3770:	2b 83       	std	Y+3, r18	; 0x03
    3772:	8b 81       	ldd	r24, Y+3	; 0x03
    3774:	9c 81       	ldd	r25, Y+4	; 0x04
    3776:	81 30       	cpi	r24, 0x01	; 1
    3778:	91 05       	cpc	r25, r1
    377a:	09 f4       	brne	.+2      	; 0x377e <Timer_init+0x2a>
    377c:	47 c0       	rjmp	.+142    	; 0x380c <Timer_init+0xb8>
    377e:	2b 81       	ldd	r18, Y+3	; 0x03
    3780:	3c 81       	ldd	r19, Y+4	; 0x04
    3782:	22 30       	cpi	r18, 0x02	; 2
    3784:	31 05       	cpc	r19, r1
    3786:	09 f4       	brne	.+2      	; 0x378a <Timer_init+0x36>
    3788:	84 c0       	rjmp	.+264    	; 0x3892 <Timer_init+0x13e>
    378a:	8b 81       	ldd	r24, Y+3	; 0x03
    378c:	9c 81       	ldd	r25, Y+4	; 0x04
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	09 f0       	breq	.+2      	; 0x3794 <Timer_init+0x40>
    3792:	c1 c0       	rjmp	.+386    	; 0x3916 <Timer_init+0x1c2>
        case TIMER0:

            TCNT0 = Config_Ptr->timer_InitialValue;
    3794:	a2 e5       	ldi	r26, 0x52	; 82
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	e9 81       	ldd	r30, Y+1	; 0x01
    379a:	fa 81       	ldd	r31, Y+2	; 0x02
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    37a2:	e9 81       	ldd	r30, Y+1	; 0x01
    37a4:	fa 81       	ldd	r31, Y+2	; 0x02
    37a6:	86 81       	ldd	r24, Z+6	; 0x06
    37a8:	88 23       	and	r24, r24
    37aa:	59 f4       	brne	.+22     	; 0x37c2 <Timer_init+0x6e>
            	TCCR0 = 0;
    37ac:	e3 e5       	ldi	r30, 0x53	; 83
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	10 82       	st	Z, r1
                TIMSK |= (1<<TOIE0);
    37b2:	a9 e5       	ldi	r26, 0x59	; 89
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e9 e5       	ldi	r30, 0x59	; 89
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	81 60       	ori	r24, 0x01	; 1
    37be:	8c 93       	st	X, r24
    37c0:	1a c0       	rjmp	.+52     	; 0x37f6 <Timer_init+0xa2>
            }
            else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    37c2:	e9 81       	ldd	r30, Y+1	; 0x01
    37c4:	fa 81       	ldd	r31, Y+2	; 0x02
    37c6:	86 81       	ldd	r24, Z+6	; 0x06
    37c8:	81 30       	cpi	r24, 0x01	; 1
    37ca:	a9 f4       	brne	.+42     	; 0x37f6 <Timer_init+0xa2>
                TCCR0 |= (1<<WGM01);
    37cc:	a3 e5       	ldi	r26, 0x53	; 83
    37ce:	b0 e0       	ldi	r27, 0x00	; 0
    37d0:	e3 e5       	ldi	r30, 0x53	; 83
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 81       	ld	r24, Z
    37d6:	88 60       	ori	r24, 0x08	; 8
    37d8:	8c 93       	st	X, r24
                OCR0 = Config_Ptr->timer_compare_MatchValue;
    37da:	ac e5       	ldi	r26, 0x5C	; 92
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	e9 81       	ldd	r30, Y+1	; 0x01
    37e0:	fa 81       	ldd	r31, Y+2	; 0x02
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	8c 93       	st	X, r24
                TIMSK |= (1<<OCIE0);
    37e8:	a9 e5       	ldi	r26, 0x59	; 89
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	e9 e5       	ldi	r30, 0x59	; 89
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	82 60       	ori	r24, 0x02	; 2
    37f4:	8c 93       	st	X, r24
            }
            TCCR0 |= Config_Ptr->timer_clock;
    37f6:	a3 e5       	ldi	r26, 0x53	; 83
    37f8:	b0 e0       	ldi	r27, 0x00	; 0
    37fa:	e3 e5       	ldi	r30, 0x53	; 83
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	90 81       	ld	r25, Z
    3800:	e9 81       	ldd	r30, Y+1	; 0x01
    3802:	fa 81       	ldd	r31, Y+2	; 0x02
    3804:	85 81       	ldd	r24, Z+5	; 0x05
    3806:	89 2b       	or	r24, r25
    3808:	8c 93       	st	X, r24
    380a:	85 c0       	rjmp	.+266    	; 0x3916 <Timer_init+0x1c2>
            break;

        case TIMER1:
            TCCR1A = 0;
    380c:	ef e4       	ldi	r30, 0x4F	; 79
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	10 82       	st	Z, r1
            TCCR1B = 0;
    3812:	ee e4       	ldi	r30, 0x4E	; 78
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	10 82       	st	Z, r1
            TCNT1 = Config_Ptr->timer_InitialValue;
    3818:	ac e4       	ldi	r26, 0x4C	; 76
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	e9 81       	ldd	r30, Y+1	; 0x01
    381e:	fa 81       	ldd	r31, Y+2	; 0x02
    3820:	80 81       	ld	r24, Z
    3822:	91 81       	ldd	r25, Z+1	; 0x01
    3824:	11 96       	adiw	r26, 0x01	; 1
    3826:	9c 93       	st	X, r25
    3828:	8e 93       	st	-X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    382a:	e9 81       	ldd	r30, Y+1	; 0x01
    382c:	fa 81       	ldd	r31, Y+2	; 0x02
    382e:	86 81       	ldd	r24, Z+6	; 0x06
    3830:	88 23       	and	r24, r24
    3832:	41 f4       	brne	.+16     	; 0x3844 <Timer_init+0xf0>
                TIMSK |= (1<<TOIE1);
    3834:	a9 e5       	ldi	r26, 0x59	; 89
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	e9 e5       	ldi	r30, 0x59	; 89
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	84 60       	ori	r24, 0x04	; 4
    3840:	8c 93       	st	X, r24
    3842:	1c c0       	rjmp	.+56     	; 0x387c <Timer_init+0x128>
            }
            else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    3844:	e9 81       	ldd	r30, Y+1	; 0x01
    3846:	fa 81       	ldd	r31, Y+2	; 0x02
    3848:	86 81       	ldd	r24, Z+6	; 0x06
    384a:	81 30       	cpi	r24, 0x01	; 1
    384c:	b9 f4       	brne	.+46     	; 0x387c <Timer_init+0x128>
                TCCR1B |= (1<<WGM12);
    384e:	ae e4       	ldi	r26, 0x4E	; 78
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	ee e4       	ldi	r30, 0x4E	; 78
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	88 60       	ori	r24, 0x08	; 8
    385a:	8c 93       	st	X, r24
                OCR1A = Config_Ptr->timer_compare_MatchValue;
    385c:	aa e4       	ldi	r26, 0x4A	; 74
    385e:	b0 e0       	ldi	r27, 0x00	; 0
    3860:	e9 81       	ldd	r30, Y+1	; 0x01
    3862:	fa 81       	ldd	r31, Y+2	; 0x02
    3864:	82 81       	ldd	r24, Z+2	; 0x02
    3866:	93 81       	ldd	r25, Z+3	; 0x03
    3868:	11 96       	adiw	r26, 0x01	; 1
    386a:	9c 93       	st	X, r25
    386c:	8e 93       	st	-X, r24
                TIMSK |= (1<<OCIE1A);
    386e:	a9 e5       	ldi	r26, 0x59	; 89
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	e9 e5       	ldi	r30, 0x59	; 89
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	80 81       	ld	r24, Z
    3878:	80 61       	ori	r24, 0x10	; 16
    387a:	8c 93       	st	X, r24
            }
            TCCR1B |= Config_Ptr->timer_clock;
    387c:	ae e4       	ldi	r26, 0x4E	; 78
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	ee e4       	ldi	r30, 0x4E	; 78
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	90 81       	ld	r25, Z
    3886:	e9 81       	ldd	r30, Y+1	; 0x01
    3888:	fa 81       	ldd	r31, Y+2	; 0x02
    388a:	85 81       	ldd	r24, Z+5	; 0x05
    388c:	89 2b       	or	r24, r25
    388e:	8c 93       	st	X, r24
    3890:	42 c0       	rjmp	.+132    	; 0x3916 <Timer_init+0x1c2>
            break;

        case TIMER2:
            TCCR2 = 0;
    3892:	e5 e4       	ldi	r30, 0x45	; 69
    3894:	f0 e0       	ldi	r31, 0x00	; 0
    3896:	10 82       	st	Z, r1
            TCNT2 = Config_Ptr->timer_InitialValue;
    3898:	a4 e4       	ldi	r26, 0x44	; 68
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	e9 81       	ldd	r30, Y+1	; 0x01
    389e:	fa 81       	ldd	r31, Y+2	; 0x02
    38a0:	80 81       	ld	r24, Z
    38a2:	91 81       	ldd	r25, Z+1	; 0x01
    38a4:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    38a6:	e9 81       	ldd	r30, Y+1	; 0x01
    38a8:	fa 81       	ldd	r31, Y+2	; 0x02
    38aa:	86 81       	ldd	r24, Z+6	; 0x06
    38ac:	88 23       	and	r24, r24
    38ae:	79 f4       	brne	.+30     	; 0x38ce <Timer_init+0x17a>
                TCCR2 |= (1<<FOC2);
    38b0:	a5 e4       	ldi	r26, 0x45	; 69
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	e5 e4       	ldi	r30, 0x45	; 69
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	80 68       	ori	r24, 0x80	; 128
    38bc:	8c 93       	st	X, r24
                TIMSK |= (1<<TOIE2);
    38be:	a9 e5       	ldi	r26, 0x59	; 89
    38c0:	b0 e0       	ldi	r27, 0x00	; 0
    38c2:	e9 e5       	ldi	r30, 0x59	; 89
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	80 81       	ld	r24, Z
    38c8:	80 64       	ori	r24, 0x40	; 64
    38ca:	8c 93       	st	X, r24
    38cc:	1a c0       	rjmp	.+52     	; 0x3902 <Timer_init+0x1ae>
            }
            else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    38ce:	e9 81       	ldd	r30, Y+1	; 0x01
    38d0:	fa 81       	ldd	r31, Y+2	; 0x02
    38d2:	86 81       	ldd	r24, Z+6	; 0x06
    38d4:	81 30       	cpi	r24, 0x01	; 1
    38d6:	a9 f4       	brne	.+42     	; 0x3902 <Timer_init+0x1ae>
                TCCR2 |= (1<<WGM21) | (1<<FOC2);
    38d8:	a5 e4       	ldi	r26, 0x45	; 69
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e5 e4       	ldi	r30, 0x45	; 69
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	88 68       	ori	r24, 0x88	; 136
    38e4:	8c 93       	st	X, r24
                OCR2 = Config_Ptr->timer_compare_MatchValue;
    38e6:	a3 e4       	ldi	r26, 0x43	; 67
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e9 81       	ldd	r30, Y+1	; 0x01
    38ec:	fa 81       	ldd	r31, Y+2	; 0x02
    38ee:	82 81       	ldd	r24, Z+2	; 0x02
    38f0:	93 81       	ldd	r25, Z+3	; 0x03
    38f2:	8c 93       	st	X, r24
                TIMSK |= (1<<OCIE2);
    38f4:	a9 e5       	ldi	r26, 0x59	; 89
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e9 e5       	ldi	r30, 0x59	; 89
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	80 68       	ori	r24, 0x80	; 128
    3900:	8c 93       	st	X, r24
            }
            TCCR2 |= Config_Ptr->timer_clock;
    3902:	a5 e4       	ldi	r26, 0x45	; 69
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	e5 e4       	ldi	r30, 0x45	; 69
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	90 81       	ld	r25, Z
    390c:	e9 81       	ldd	r30, Y+1	; 0x01
    390e:	fa 81       	ldd	r31, Y+2	; 0x02
    3910:	85 81       	ldd	r24, Z+5	; 0x05
    3912:	89 2b       	or	r24, r25
    3914:	8c 93       	st	X, r24
            break;
    }
}
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	cf 91       	pop	r28
    3920:	df 91       	pop	r29
    3922:	08 95       	ret

00003924 <Timer_deInit>:
void Timer_deInit(Timer_ID_Type timer_type) {
    3924:	df 93       	push	r29
    3926:	cf 93       	push	r28
    3928:	00 d0       	rcall	.+0      	; 0x392a <Timer_deInit+0x6>
    392a:	0f 92       	push	r0
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
    3930:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	28 2f       	mov	r18, r24
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	3b 83       	std	Y+3, r19	; 0x03
    393a:	2a 83       	std	Y+2, r18	; 0x02
    393c:	8a 81       	ldd	r24, Y+2	; 0x02
    393e:	9b 81       	ldd	r25, Y+3	; 0x03
    3940:	81 30       	cpi	r24, 0x01	; 1
    3942:	91 05       	cpc	r25, r1
    3944:	a1 f0       	breq	.+40     	; 0x396e <Timer_deInit+0x4a>
    3946:	2a 81       	ldd	r18, Y+2	; 0x02
    3948:	3b 81       	ldd	r19, Y+3	; 0x03
    394a:	22 30       	cpi	r18, 0x02	; 2
    394c:	31 05       	cpc	r19, r1
    394e:	e9 f0       	breq	.+58     	; 0x398a <Timer_deInit+0x66>
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	9b 81       	ldd	r25, Y+3	; 0x03
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	19 f5       	brne	.+70     	; 0x399e <Timer_deInit+0x7a>
        case TIMER0:
            TCCR0 = 0;
    3958:	e3 e5       	ldi	r30, 0x53	; 83
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	10 82       	st	Z, r1
            TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    395e:	a9 e5       	ldi	r26, 0x59	; 89
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	e9 e5       	ldi	r30, 0x59	; 89
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	8c 7f       	andi	r24, 0xFC	; 252
    396a:	8c 93       	st	X, r24
    396c:	18 c0       	rjmp	.+48     	; 0x399e <Timer_deInit+0x7a>
            break;
        case TIMER1:
            TCCR1A = 0;
    396e:	ef e4       	ldi	r30, 0x4F	; 79
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	10 82       	st	Z, r1
            TCCR1B = 0;
    3974:	ee e4       	ldi	r30, 0x4E	; 78
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	10 82       	st	Z, r1
            TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A);
    397a:	a9 e5       	ldi	r26, 0x59	; 89
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	e9 e5       	ldi	r30, 0x59	; 89
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	8b 7e       	andi	r24, 0xEB	; 235
    3986:	8c 93       	st	X, r24
    3988:	0a c0       	rjmp	.+20     	; 0x399e <Timer_deInit+0x7a>
            break;
        case TIMER2:
            TCCR2 = 0;
    398a:	e5 e4       	ldi	r30, 0x45	; 69
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	10 82       	st	Z, r1
            TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
    3990:	a9 e5       	ldi	r26, 0x59	; 89
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e9 e5       	ldi	r30, 0x59	; 89
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	8f 73       	andi	r24, 0x3F	; 63
    399c:	8c 93       	st	X, r24
            break;
    }
}
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	cf 91       	pop	r28
    39a6:	df 91       	pop	r29
    39a8:	08 95       	ret

000039aa <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    39aa:	df 93       	push	r29
    39ac:	cf 93       	push	r28
    39ae:	00 d0       	rcall	.+0      	; 0x39b0 <Timer_setCallBack+0x6>
    39b0:	00 d0       	rcall	.+0      	; 0x39b2 <Timer_setCallBack+0x8>
    39b2:	0f 92       	push	r0
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	9a 83       	std	Y+2, r25	; 0x02
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	28 2f       	mov	r18, r24
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	3d 83       	std	Y+5, r19	; 0x05
    39c6:	2c 83       	std	Y+4, r18	; 0x04
    39c8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ca:	9d 81       	ldd	r25, Y+5	; 0x05
    39cc:	81 30       	cpi	r24, 0x01	; 1
    39ce:	91 05       	cpc	r25, r1
    39d0:	81 f0       	breq	.+32     	; 0x39f2 <Timer_setCallBack+0x48>
    39d2:	2c 81       	ldd	r18, Y+4	; 0x04
    39d4:	3d 81       	ldd	r19, Y+5	; 0x05
    39d6:	22 30       	cpi	r18, 0x02	; 2
    39d8:	31 05       	cpc	r19, r1
    39da:	91 f0       	breq	.+36     	; 0x3a00 <Timer_setCallBack+0x56>
    39dc:	8c 81       	ldd	r24, Y+4	; 0x04
    39de:	9d 81       	ldd	r25, Y+5	; 0x05
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	a1 f4       	brne	.+40     	; 0x3a0c <Timer_setCallBack+0x62>
        case TIMER0:
            Timer0_CallBackPtr = a_ptr;
    39e4:	89 81       	ldd	r24, Y+1	; 0x01
    39e6:	9a 81       	ldd	r25, Y+2	; 0x02
    39e8:	90 93 30 01 	sts	0x0130, r25
    39ec:	80 93 2f 01 	sts	0x012F, r24
    39f0:	0d c0       	rjmp	.+26     	; 0x3a0c <Timer_setCallBack+0x62>
            break;
        case TIMER1:
            Timer1_CallBackPtr = a_ptr;
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	9a 81       	ldd	r25, Y+2	; 0x02
    39f6:	90 93 32 01 	sts	0x0132, r25
    39fa:	80 93 31 01 	sts	0x0131, r24
    39fe:	06 c0       	rjmp	.+12     	; 0x3a0c <Timer_setCallBack+0x62>
            break;
        case TIMER2:
            Timer2_CallBackPtr = a_ptr;
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	9a 81       	ldd	r25, Y+2	; 0x02
    3a04:	90 93 34 01 	sts	0x0134, r25
    3a08:	80 93 33 01 	sts	0x0133, r24
            break;
    }
}
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	08 95       	ret

00003a1c <__vector_11>:


ISR(TIMER0_OVF_vect) {
    3a1c:	1f 92       	push	r1
    3a1e:	0f 92       	push	r0
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	0f 92       	push	r0
    3a24:	11 24       	eor	r1, r1
    3a26:	2f 93       	push	r18
    3a28:	3f 93       	push	r19
    3a2a:	4f 93       	push	r20
    3a2c:	5f 93       	push	r21
    3a2e:	6f 93       	push	r22
    3a30:	7f 93       	push	r23
    3a32:	8f 93       	push	r24
    3a34:	9f 93       	push	r25
    3a36:	af 93       	push	r26
    3a38:	bf 93       	push	r27
    3a3a:	ef 93       	push	r30
    3a3c:	ff 93       	push	r31
    3a3e:	df 93       	push	r29
    3a40:	cf 93       	push	r28
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    if (Timer0_CallBackPtr != NULL_PTR) {
    3a46:	80 91 2f 01 	lds	r24, 0x012F
    3a4a:	90 91 30 01 	lds	r25, 0x0130
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	29 f0       	breq	.+10     	; 0x3a5c <__vector_11+0x40>
        Timer0_CallBackPtr();
    3a52:	e0 91 2f 01 	lds	r30, 0x012F
    3a56:	f0 91 30 01 	lds	r31, 0x0130
    3a5a:	09 95       	icall
    }
}
    3a5c:	cf 91       	pop	r28
    3a5e:	df 91       	pop	r29
    3a60:	ff 91       	pop	r31
    3a62:	ef 91       	pop	r30
    3a64:	bf 91       	pop	r27
    3a66:	af 91       	pop	r26
    3a68:	9f 91       	pop	r25
    3a6a:	8f 91       	pop	r24
    3a6c:	7f 91       	pop	r23
    3a6e:	6f 91       	pop	r22
    3a70:	5f 91       	pop	r21
    3a72:	4f 91       	pop	r20
    3a74:	3f 91       	pop	r19
    3a76:	2f 91       	pop	r18
    3a78:	0f 90       	pop	r0
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	0f 90       	pop	r0
    3a7e:	1f 90       	pop	r1
    3a80:	18 95       	reti

00003a82 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    3a82:	1f 92       	push	r1
    3a84:	0f 92       	push	r0
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	0f 92       	push	r0
    3a8a:	11 24       	eor	r1, r1
    3a8c:	2f 93       	push	r18
    3a8e:	3f 93       	push	r19
    3a90:	4f 93       	push	r20
    3a92:	5f 93       	push	r21
    3a94:	6f 93       	push	r22
    3a96:	7f 93       	push	r23
    3a98:	8f 93       	push	r24
    3a9a:	9f 93       	push	r25
    3a9c:	af 93       	push	r26
    3a9e:	bf 93       	push	r27
    3aa0:	ef 93       	push	r30
    3aa2:	ff 93       	push	r31
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	cd b7       	in	r28, 0x3d	; 61
    3aaa:	de b7       	in	r29, 0x3e	; 62
    if (Timer0_CallBackPtr != NULL_PTR) {
    3aac:	80 91 2f 01 	lds	r24, 0x012F
    3ab0:	90 91 30 01 	lds	r25, 0x0130
    3ab4:	00 97       	sbiw	r24, 0x00	; 0
    3ab6:	29 f0       	breq	.+10     	; 0x3ac2 <__vector_10+0x40>
        Timer0_CallBackPtr();
    3ab8:	e0 91 2f 01 	lds	r30, 0x012F
    3abc:	f0 91 30 01 	lds	r31, 0x0130
    3ac0:	09 95       	icall
    }
}
    3ac2:	cf 91       	pop	r28
    3ac4:	df 91       	pop	r29
    3ac6:	ff 91       	pop	r31
    3ac8:	ef 91       	pop	r30
    3aca:	bf 91       	pop	r27
    3acc:	af 91       	pop	r26
    3ace:	9f 91       	pop	r25
    3ad0:	8f 91       	pop	r24
    3ad2:	7f 91       	pop	r23
    3ad4:	6f 91       	pop	r22
    3ad6:	5f 91       	pop	r21
    3ad8:	4f 91       	pop	r20
    3ada:	3f 91       	pop	r19
    3adc:	2f 91       	pop	r18
    3ade:	0f 90       	pop	r0
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	0f 90       	pop	r0
    3ae4:	1f 90       	pop	r1
    3ae6:	18 95       	reti

00003ae8 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    3ae8:	1f 92       	push	r1
    3aea:	0f 92       	push	r0
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	0f 92       	push	r0
    3af0:	11 24       	eor	r1, r1
    3af2:	2f 93       	push	r18
    3af4:	3f 93       	push	r19
    3af6:	4f 93       	push	r20
    3af8:	5f 93       	push	r21
    3afa:	6f 93       	push	r22
    3afc:	7f 93       	push	r23
    3afe:	8f 93       	push	r24
    3b00:	9f 93       	push	r25
    3b02:	af 93       	push	r26
    3b04:	bf 93       	push	r27
    3b06:	ef 93       	push	r30
    3b08:	ff 93       	push	r31
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    if (Timer1_CallBackPtr != NULL_PTR) {
    3b12:	80 91 31 01 	lds	r24, 0x0131
    3b16:	90 91 32 01 	lds	r25, 0x0132
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	29 f0       	breq	.+10     	; 0x3b28 <__vector_9+0x40>
        Timer1_CallBackPtr();
    3b1e:	e0 91 31 01 	lds	r30, 0x0131
    3b22:	f0 91 32 01 	lds	r31, 0x0132
    3b26:	09 95       	icall
    }
}
    3b28:	cf 91       	pop	r28
    3b2a:	df 91       	pop	r29
    3b2c:	ff 91       	pop	r31
    3b2e:	ef 91       	pop	r30
    3b30:	bf 91       	pop	r27
    3b32:	af 91       	pop	r26
    3b34:	9f 91       	pop	r25
    3b36:	8f 91       	pop	r24
    3b38:	7f 91       	pop	r23
    3b3a:	6f 91       	pop	r22
    3b3c:	5f 91       	pop	r21
    3b3e:	4f 91       	pop	r20
    3b40:	3f 91       	pop	r19
    3b42:	2f 91       	pop	r18
    3b44:	0f 90       	pop	r0
    3b46:	0f be       	out	0x3f, r0	; 63
    3b48:	0f 90       	pop	r0
    3b4a:	1f 90       	pop	r1
    3b4c:	18 95       	reti

00003b4e <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    3b4e:	1f 92       	push	r1
    3b50:	0f 92       	push	r0
    3b52:	0f b6       	in	r0, 0x3f	; 63
    3b54:	0f 92       	push	r0
    3b56:	11 24       	eor	r1, r1
    3b58:	2f 93       	push	r18
    3b5a:	3f 93       	push	r19
    3b5c:	4f 93       	push	r20
    3b5e:	5f 93       	push	r21
    3b60:	6f 93       	push	r22
    3b62:	7f 93       	push	r23
    3b64:	8f 93       	push	r24
    3b66:	9f 93       	push	r25
    3b68:	af 93       	push	r26
    3b6a:	bf 93       	push	r27
    3b6c:	ef 93       	push	r30
    3b6e:	ff 93       	push	r31
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
    if (Timer1_CallBackPtr != NULL_PTR) {
    3b78:	80 91 31 01 	lds	r24, 0x0131
    3b7c:	90 91 32 01 	lds	r25, 0x0132
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	29 f0       	breq	.+10     	; 0x3b8e <__vector_7+0x40>
        Timer1_CallBackPtr();
    3b84:	e0 91 31 01 	lds	r30, 0x0131
    3b88:	f0 91 32 01 	lds	r31, 0x0132
    3b8c:	09 95       	icall
    }
}
    3b8e:	cf 91       	pop	r28
    3b90:	df 91       	pop	r29
    3b92:	ff 91       	pop	r31
    3b94:	ef 91       	pop	r30
    3b96:	bf 91       	pop	r27
    3b98:	af 91       	pop	r26
    3b9a:	9f 91       	pop	r25
    3b9c:	8f 91       	pop	r24
    3b9e:	7f 91       	pop	r23
    3ba0:	6f 91       	pop	r22
    3ba2:	5f 91       	pop	r21
    3ba4:	4f 91       	pop	r20
    3ba6:	3f 91       	pop	r19
    3ba8:	2f 91       	pop	r18
    3baa:	0f 90       	pop	r0
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	0f 90       	pop	r0
    3bb0:	1f 90       	pop	r1
    3bb2:	18 95       	reti

00003bb4 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    3bb4:	1f 92       	push	r1
    3bb6:	0f 92       	push	r0
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	0f 92       	push	r0
    3bbc:	11 24       	eor	r1, r1
    3bbe:	2f 93       	push	r18
    3bc0:	3f 93       	push	r19
    3bc2:	4f 93       	push	r20
    3bc4:	5f 93       	push	r21
    3bc6:	6f 93       	push	r22
    3bc8:	7f 93       	push	r23
    3bca:	8f 93       	push	r24
    3bcc:	9f 93       	push	r25
    3bce:	af 93       	push	r26
    3bd0:	bf 93       	push	r27
    3bd2:	ef 93       	push	r30
    3bd4:	ff 93       	push	r31
    3bd6:	df 93       	push	r29
    3bd8:	cf 93       	push	r28
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    if (Timer2_CallBackPtr != NULL_PTR) {
    3bde:	80 91 33 01 	lds	r24, 0x0133
    3be2:	90 91 34 01 	lds	r25, 0x0134
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	29 f0       	breq	.+10     	; 0x3bf4 <__vector_5+0x40>
        Timer2_CallBackPtr();
    3bea:	e0 91 33 01 	lds	r30, 0x0133
    3bee:	f0 91 34 01 	lds	r31, 0x0134
    3bf2:	09 95       	icall
    }
}
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	ff 91       	pop	r31
    3bfa:	ef 91       	pop	r30
    3bfc:	bf 91       	pop	r27
    3bfe:	af 91       	pop	r26
    3c00:	9f 91       	pop	r25
    3c02:	8f 91       	pop	r24
    3c04:	7f 91       	pop	r23
    3c06:	6f 91       	pop	r22
    3c08:	5f 91       	pop	r21
    3c0a:	4f 91       	pop	r20
    3c0c:	3f 91       	pop	r19
    3c0e:	2f 91       	pop	r18
    3c10:	0f 90       	pop	r0
    3c12:	0f be       	out	0x3f, r0	; 63
    3c14:	0f 90       	pop	r0
    3c16:	1f 90       	pop	r1
    3c18:	18 95       	reti

00003c1a <__vector_4>:

ISR(TIMER2_COMP_vect) {
    3c1a:	1f 92       	push	r1
    3c1c:	0f 92       	push	r0
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	0f 92       	push	r0
    3c22:	11 24       	eor	r1, r1
    3c24:	2f 93       	push	r18
    3c26:	3f 93       	push	r19
    3c28:	4f 93       	push	r20
    3c2a:	5f 93       	push	r21
    3c2c:	6f 93       	push	r22
    3c2e:	7f 93       	push	r23
    3c30:	8f 93       	push	r24
    3c32:	9f 93       	push	r25
    3c34:	af 93       	push	r26
    3c36:	bf 93       	push	r27
    3c38:	ef 93       	push	r30
    3c3a:	ff 93       	push	r31
    3c3c:	df 93       	push	r29
    3c3e:	cf 93       	push	r28
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
    if (Timer2_CallBackPtr != NULL_PTR) {
    3c44:	80 91 33 01 	lds	r24, 0x0133
    3c48:	90 91 34 01 	lds	r25, 0x0134
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	29 f0       	breq	.+10     	; 0x3c5a <__vector_4+0x40>
        Timer2_CallBackPtr();
    3c50:	e0 91 33 01 	lds	r30, 0x0133
    3c54:	f0 91 34 01 	lds	r31, 0x0134
    3c58:	09 95       	icall
    }
}
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	ff 91       	pop	r31
    3c60:	ef 91       	pop	r30
    3c62:	bf 91       	pop	r27
    3c64:	af 91       	pop	r26
    3c66:	9f 91       	pop	r25
    3c68:	8f 91       	pop	r24
    3c6a:	7f 91       	pop	r23
    3c6c:	6f 91       	pop	r22
    3c6e:	5f 91       	pop	r21
    3c70:	4f 91       	pop	r20
    3c72:	3f 91       	pop	r19
    3c74:	2f 91       	pop	r18
    3c76:	0f 90       	pop	r0
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	0f 90       	pop	r0
    3c7c:	1f 90       	pop	r1
    3c7e:	18 95       	reti

00003c80 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	28 97       	sbiw	r28, 0x08	; 8
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	f8 94       	cli
    3c8e:	de bf       	out	0x3e, r29	; 62
    3c90:	0f be       	out	0x3f, r0	; 63
    3c92:	cd bf       	out	0x3d, r28	; 61
    3c94:	9c 83       	std	Y+4, r25	; 0x04
    3c96:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3c98:	1a 82       	std	Y+2, r1	; 0x02
    3c9a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3c9c:	eb e2       	ldi	r30, 0x2B	; 43
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	82 e0       	ldi	r24, 0x02	; 2
    3ca2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3ca4:	ea e2       	ldi	r30, 0x2A	; 42
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	88 e1       	ldi	r24, 0x18	; 24
    3caa:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3cac:	e0 e4       	ldi	r30, 0x40	; 64
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	80 e8       	ldi	r24, 0x80	; 128
    3cb2:	80 83       	st	Z, r24
	switch(Config_Ptr->bit_data){
    3cb4:	eb 81       	ldd	r30, Y+3	; 0x03
    3cb6:	fc 81       	ldd	r31, Y+4	; 0x04
    3cb8:	81 81       	ldd	r24, Z+1	; 0x01
    3cba:	28 2f       	mov	r18, r24
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	38 87       	std	Y+8, r19	; 0x08
    3cc0:	2f 83       	std	Y+7, r18	; 0x07
    3cc2:	8f 81       	ldd	r24, Y+7	; 0x07
    3cc4:	98 85       	ldd	r25, Y+8	; 0x08
    3cc6:	82 30       	cpi	r24, 0x02	; 2
    3cc8:	91 05       	cpc	r25, r1
    3cca:	f1 f0       	breq	.+60     	; 0x3d08 <UART_init+0x88>
    3ccc:	2f 81       	ldd	r18, Y+7	; 0x07
    3cce:	38 85       	ldd	r19, Y+8	; 0x08
    3cd0:	23 30       	cpi	r18, 0x03	; 3
    3cd2:	31 05       	cpc	r19, r1
    3cd4:	34 f4       	brge	.+12     	; 0x3ce2 <UART_init+0x62>
    3cd6:	8f 81       	ldd	r24, Y+7	; 0x07
    3cd8:	98 85       	ldd	r25, Y+8	; 0x08
    3cda:	81 30       	cpi	r24, 0x01	; 1
    3cdc:	91 05       	cpc	r25, r1
    3cde:	61 f0       	breq	.+24     	; 0x3cf8 <UART_init+0x78>
    3ce0:	38 c0       	rjmp	.+112    	; 0x3d52 <UART_init+0xd2>
    3ce2:	2f 81       	ldd	r18, Y+7	; 0x07
    3ce4:	38 85       	ldd	r19, Y+8	; 0x08
    3ce6:	23 30       	cpi	r18, 0x03	; 3
    3ce8:	31 05       	cpc	r19, r1
    3cea:	b1 f0       	breq	.+44     	; 0x3d18 <UART_init+0x98>
    3cec:	8f 81       	ldd	r24, Y+7	; 0x07
    3cee:	98 85       	ldd	r25, Y+8	; 0x08
    3cf0:	84 30       	cpi	r24, 0x04	; 4
    3cf2:	91 05       	cpc	r25, r1
    3cf4:	c9 f0       	breq	.+50     	; 0x3d28 <UART_init+0xa8>
    3cf6:	2d c0       	rjmp	.+90     	; 0x3d52 <UART_init+0xd2>
	case sixbit:
		SET_BIT(UCSRC,UCSZ0);
    3cf8:	a0 e4       	ldi	r26, 0x40	; 64
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	e0 e4       	ldi	r30, 0x40	; 64
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	80 81       	ld	r24, Z
    3d02:	82 60       	ori	r24, 0x02	; 2
    3d04:	8c 93       	st	X, r24
    3d06:	25 c0       	rjmp	.+74     	; 0x3d52 <UART_init+0xd2>
		break;
	case sevenbit:
		SET_BIT(UCSRC,UCSZ1);
    3d08:	a0 e4       	ldi	r26, 0x40	; 64
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	e0 e4       	ldi	r30, 0x40	; 64
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	80 81       	ld	r24, Z
    3d12:	84 60       	ori	r24, 0x04	; 4
    3d14:	8c 93       	st	X, r24
    3d16:	1d c0       	rjmp	.+58     	; 0x3d52 <UART_init+0xd2>
		break;
	case eightbit:
		UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
    3d18:	a0 e4       	ldi	r26, 0x40	; 64
    3d1a:	b0 e0       	ldi	r27, 0x00	; 0
    3d1c:	e0 e4       	ldi	r30, 0x40	; 64
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	80 81       	ld	r24, Z
    3d22:	86 60       	ori	r24, 0x06	; 6
    3d24:	8c 93       	st	X, r24
    3d26:	15 c0       	rjmp	.+42     	; 0x3d52 <UART_init+0xd2>
		break;
	case ninebit:
		SET_BIT(UCSRC,UCSZ0);
    3d28:	a0 e4       	ldi	r26, 0x40	; 64
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	e0 e4       	ldi	r30, 0x40	; 64
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 81       	ld	r24, Z
    3d32:	82 60       	ori	r24, 0x02	; 2
    3d34:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    3d36:	a0 e4       	ldi	r26, 0x40	; 64
    3d38:	b0 e0       	ldi	r27, 0x00	; 0
    3d3a:	e0 e4       	ldi	r30, 0x40	; 64
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	80 81       	ld	r24, Z
    3d40:	84 60       	ori	r24, 0x04	; 4
    3d42:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    3d44:	aa e2       	ldi	r26, 0x2A	; 42
    3d46:	b0 e0       	ldi	r27, 0x00	; 0
    3d48:	ea e2       	ldi	r30, 0x2A	; 42
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	80 81       	ld	r24, Z
    3d4e:	84 60       	ori	r24, 0x04	; 4
    3d50:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

	switch (Config_Ptr->parity) {
    3d52:	eb 81       	ldd	r30, Y+3	; 0x03
    3d54:	fc 81       	ldd	r31, Y+4	; 0x04
    3d56:	80 81       	ld	r24, Z
    3d58:	28 2f       	mov	r18, r24
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	3e 83       	std	Y+6, r19	; 0x06
    3d5e:	2d 83       	std	Y+5, r18	; 0x05
    3d60:	8d 81       	ldd	r24, Y+5	; 0x05
    3d62:	9e 81       	ldd	r25, Y+6	; 0x06
    3d64:	81 30       	cpi	r24, 0x01	; 1
    3d66:	91 05       	cpc	r25, r1
    3d68:	31 f0       	breq	.+12     	; 0x3d76 <UART_init+0xf6>
    3d6a:	2d 81       	ldd	r18, Y+5	; 0x05
    3d6c:	3e 81       	ldd	r19, Y+6	; 0x06
    3d6e:	22 30       	cpi	r18, 0x02	; 2
    3d70:	31 05       	cpc	r19, r1
    3d72:	49 f0       	breq	.+18     	; 0x3d86 <UART_init+0x106>
    3d74:	0f c0       	rjmp	.+30     	; 0x3d94 <UART_init+0x114>
	case NONE:
		break;
	case EVEN:
		UCSRC |= (1 << UPM1);
    3d76:	a0 e4       	ldi	r26, 0x40	; 64
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	e0 e4       	ldi	r30, 0x40	; 64
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	80 81       	ld	r24, Z
    3d80:	80 62       	ori	r24, 0x20	; 32
    3d82:	8c 93       	st	X, r24
    3d84:	07 c0       	rjmp	.+14     	; 0x3d94 <UART_init+0x114>
		break;
	case ODD:
		UCSRC |= (1 << UPM1) | (1 << UPM0);
    3d86:	a0 e4       	ldi	r26, 0x40	; 64
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	e0 e4       	ldi	r30, 0x40	; 64
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	80 63       	ori	r24, 0x30	; 48
    3d92:	8c 93       	st	X, r24
		break;
	}
	if (Config_Ptr->stop_bit == TWO_STOP_BIT) {
    3d94:	eb 81       	ldd	r30, Y+3	; 0x03
    3d96:	fc 81       	ldd	r31, Y+4	; 0x04
    3d98:	86 81       	ldd	r24, Z+6	; 0x06
    3d9a:	81 30       	cpi	r24, 0x01	; 1
    3d9c:	41 f4       	brne	.+16     	; 0x3dae <UART_init+0x12e>
		UCSRC |= (1 << USBS);
    3d9e:	a0 e4       	ldi	r26, 0x40	; 64
    3da0:	b0 e0       	ldi	r27, 0x00	; 0
    3da2:	e0 e4       	ldi	r30, 0x40	; 64
    3da4:	f0 e0       	ldi	r31, 0x00	; 0
    3da6:	80 81       	ld	r24, Z
    3da8:	88 60       	ori	r24, 0x08	; 8
    3daa:	8c 93       	st	X, r24
    3dac:	07 c0       	rjmp	.+14     	; 0x3dbc <UART_init+0x13c>
	}
	else {
		UCSRC &= ~(1 << USBS);
    3dae:	a0 e4       	ldi	r26, 0x40	; 64
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	e0 e4       	ldi	r30, 0x40	; 64
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	80 81       	ld	r24, Z
    3db8:	87 7f       	andi	r24, 0xF7	; 247
    3dba:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3dbc:	eb 81       	ldd	r30, Y+3	; 0x03
    3dbe:	fc 81       	ldd	r31, Y+4	; 0x04
    3dc0:	82 81       	ldd	r24, Z+2	; 0x02
    3dc2:	93 81       	ldd	r25, Z+3	; 0x03
    3dc4:	a4 81       	ldd	r26, Z+4	; 0x04
    3dc6:	b5 81       	ldd	r27, Z+5	; 0x05
    3dc8:	88 0f       	add	r24, r24
    3dca:	99 1f       	adc	r25, r25
    3dcc:	aa 1f       	adc	r26, r26
    3dce:	bb 1f       	adc	r27, r27
    3dd0:	88 0f       	add	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	aa 1f       	adc	r26, r26
    3dd6:	bb 1f       	adc	r27, r27
    3dd8:	88 0f       	add	r24, r24
    3dda:	99 1f       	adc	r25, r25
    3ddc:	aa 1f       	adc	r26, r26
    3dde:	bb 1f       	adc	r27, r27
    3de0:	9c 01       	movw	r18, r24
    3de2:	ad 01       	movw	r20, r26
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	92 e1       	ldi	r25, 0x12	; 18
    3de8:	aa e7       	ldi	r26, 0x7A	; 122
    3dea:	b0 e0       	ldi	r27, 0x00	; 0
    3dec:	bc 01       	movw	r22, r24
    3dee:	cd 01       	movw	r24, r26
    3df0:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__udivmodsi4>
    3df4:	da 01       	movw	r26, r20
    3df6:	c9 01       	movw	r24, r18
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3dfe:	e0 e4       	ldi	r30, 0x40	; 64
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	9a 81       	ldd	r25, Y+2	; 0x02
    3e06:	89 2f       	mov	r24, r25
    3e08:	99 27       	eor	r25, r25
    3e0a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3e0c:	e9 e2       	ldi	r30, 0x29	; 41
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	80 83       	st	Z, r24
}
    3e14:	28 96       	adiw	r28, 0x08	; 8
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	08 95       	ret

00003e26 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3e26:	df 93       	push	r29
    3e28:	cf 93       	push	r28
    3e2a:	0f 92       	push	r0
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3e32:	eb e2       	ldi	r30, 0x2B	; 43
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	80 81       	ld	r24, Z
    3e38:	88 2f       	mov	r24, r24
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	80 72       	andi	r24, 0x20	; 32
    3e3e:	90 70       	andi	r25, 0x00	; 0
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	b9 f3       	breq	.-18     	; 0x3e32 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3e44:	ec e2       	ldi	r30, 0x2C	; 44
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3e4c:	0f 90       	pop	r0
    3e4e:	cf 91       	pop	r28
    3e50:	df 91       	pop	r29
    3e52:	08 95       	ret

00003e54 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3e54:	df 93       	push	r29
    3e56:	cf 93       	push	r28
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3e5c:	eb e2       	ldi	r30, 0x2B	; 43
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	80 81       	ld	r24, Z
    3e62:	88 23       	and	r24, r24
    3e64:	dc f7       	brge	.-10     	; 0x3e5c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3e66:	ec e2       	ldi	r30, 0x2C	; 44
    3e68:	f0 e0       	ldi	r31, 0x00	; 0
    3e6a:	80 81       	ld	r24, Z
}
    3e6c:	cf 91       	pop	r28
    3e6e:	df 91       	pop	r29
    3e70:	08 95       	ret

00003e72 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3e72:	df 93       	push	r29
    3e74:	cf 93       	push	r28
    3e76:	00 d0       	rcall	.+0      	; 0x3e78 <UART_sendString+0x6>
    3e78:	0f 92       	push	r0
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
    3e7e:	9b 83       	std	Y+3, r25	; 0x03
    3e80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3e82:	19 82       	std	Y+1, r1	; 0x01
    3e84:	0e c0       	rjmp	.+28     	; 0x3ea2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{

		UART_sendByte(Str[i]);
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e90:	fc 01       	movw	r30, r24
    3e92:	e2 0f       	add	r30, r18
    3e94:	f3 1f       	adc	r31, r19
    3e96:	80 81       	ld	r24, Z
    3e98:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <UART_sendByte>
		i++;
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ea0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    3eac:	fc 01       	movw	r30, r24
    3eae:	e2 0f       	add	r30, r18
    3eb0:	f3 1f       	adc	r31, r19
    3eb2:	80 81       	ld	r24, Z
    3eb4:	88 23       	and	r24, r24
    3eb6:	39 f7       	brne	.-50     	; 0x3e86 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3eb8:	0f 90       	pop	r0
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3ec4:	0f 93       	push	r16
    3ec6:	1f 93       	push	r17
    3ec8:	df 93       	push	r29
    3eca:	cf 93       	push	r28
    3ecc:	00 d0       	rcall	.+0      	; 0x3ece <UART_receiveString+0xa>
    3ece:	0f 92       	push	r0
    3ed0:	cd b7       	in	r28, 0x3d	; 61
    3ed2:	de b7       	in	r29, 0x3e	; 62
    3ed4:	9b 83       	std	Y+3, r25	; 0x03
    3ed6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ed8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3eda:	89 81       	ldd	r24, Y+1	; 0x01
    3edc:	28 2f       	mov	r18, r24
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ee4:	8c 01       	movw	r16, r24
    3ee6:	02 0f       	add	r16, r18
    3ee8:	13 1f       	adc	r17, r19
    3eea:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <UART_recieveByte>
    3eee:	f8 01       	movw	r30, r16
    3ef0:	80 83       	st	Z, r24
    3ef2:	0f c0       	rjmp	.+30     	; 0x3f12 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	8f 5f       	subi	r24, 0xFF	; 255
    3ef8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	28 2f       	mov	r18, r24
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	8a 81       	ldd	r24, Y+2	; 0x02
    3f02:	9b 81       	ldd	r25, Y+3	; 0x03
    3f04:	8c 01       	movw	r16, r24
    3f06:	02 0f       	add	r16, r18
    3f08:	13 1f       	adc	r17, r19
    3f0a:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <UART_recieveByte>
    3f0e:	f8 01       	movw	r30, r16
    3f10:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3f12:	89 81       	ldd	r24, Y+1	; 0x01
    3f14:	28 2f       	mov	r18, r24
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	e2 0f       	add	r30, r18
    3f20:	f3 1f       	adc	r31, r19
    3f22:	80 81       	ld	r24, Z
    3f24:	83 32       	cpi	r24, 0x23	; 35
    3f26:	31 f7       	brne	.-52     	; 0x3ef4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3f28:	89 81       	ldd	r24, Y+1	; 0x01
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f30:	9b 81       	ldd	r25, Y+3	; 0x03
    3f32:	fc 01       	movw	r30, r24
    3f34:	e2 0f       	add	r30, r18
    3f36:	f3 1f       	adc	r31, r19
    3f38:	10 82       	st	Z, r1
}
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	0f 90       	pop	r0
    3f40:	cf 91       	pop	r28
    3f42:	df 91       	pop	r29
    3f44:	1f 91       	pop	r17
    3f46:	0f 91       	pop	r16
    3f48:	08 95       	ret

00003f4a <__udivmodsi4>:
    3f4a:	a1 e2       	ldi	r26, 0x21	; 33
    3f4c:	1a 2e       	mov	r1, r26
    3f4e:	aa 1b       	sub	r26, r26
    3f50:	bb 1b       	sub	r27, r27
    3f52:	fd 01       	movw	r30, r26
    3f54:	0d c0       	rjmp	.+26     	; 0x3f70 <__udivmodsi4_ep>

00003f56 <__udivmodsi4_loop>:
    3f56:	aa 1f       	adc	r26, r26
    3f58:	bb 1f       	adc	r27, r27
    3f5a:	ee 1f       	adc	r30, r30
    3f5c:	ff 1f       	adc	r31, r31
    3f5e:	a2 17       	cp	r26, r18
    3f60:	b3 07       	cpc	r27, r19
    3f62:	e4 07       	cpc	r30, r20
    3f64:	f5 07       	cpc	r31, r21
    3f66:	20 f0       	brcs	.+8      	; 0x3f70 <__udivmodsi4_ep>
    3f68:	a2 1b       	sub	r26, r18
    3f6a:	b3 0b       	sbc	r27, r19
    3f6c:	e4 0b       	sbc	r30, r20
    3f6e:	f5 0b       	sbc	r31, r21

00003f70 <__udivmodsi4_ep>:
    3f70:	66 1f       	adc	r22, r22
    3f72:	77 1f       	adc	r23, r23
    3f74:	88 1f       	adc	r24, r24
    3f76:	99 1f       	adc	r25, r25
    3f78:	1a 94       	dec	r1
    3f7a:	69 f7       	brne	.-38     	; 0x3f56 <__udivmodsi4_loop>
    3f7c:	60 95       	com	r22
    3f7e:	70 95       	com	r23
    3f80:	80 95       	com	r24
    3f82:	90 95       	com	r25
    3f84:	9b 01       	movw	r18, r22
    3f86:	ac 01       	movw	r20, r24
    3f88:	bd 01       	movw	r22, r26
    3f8a:	cf 01       	movw	r24, r30
    3f8c:	08 95       	ret

00003f8e <__prologue_saves__>:
    3f8e:	2f 92       	push	r2
    3f90:	3f 92       	push	r3
    3f92:	4f 92       	push	r4
    3f94:	5f 92       	push	r5
    3f96:	6f 92       	push	r6
    3f98:	7f 92       	push	r7
    3f9a:	8f 92       	push	r8
    3f9c:	9f 92       	push	r9
    3f9e:	af 92       	push	r10
    3fa0:	bf 92       	push	r11
    3fa2:	cf 92       	push	r12
    3fa4:	df 92       	push	r13
    3fa6:	ef 92       	push	r14
    3fa8:	ff 92       	push	r15
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	cd b7       	in	r28, 0x3d	; 61
    3fb4:	de b7       	in	r29, 0x3e	; 62
    3fb6:	ca 1b       	sub	r28, r26
    3fb8:	db 0b       	sbc	r29, r27
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	09 94       	ijmp

00003fc6 <__epilogue_restores__>:
    3fc6:	2a 88       	ldd	r2, Y+18	; 0x12
    3fc8:	39 88       	ldd	r3, Y+17	; 0x11
    3fca:	48 88       	ldd	r4, Y+16	; 0x10
    3fcc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fce:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fd0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fd2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fd8:	b9 84       	ldd	r11, Y+9	; 0x09
    3fda:	c8 84       	ldd	r12, Y+8	; 0x08
    3fdc:	df 80       	ldd	r13, Y+7	; 0x07
    3fde:	ee 80       	ldd	r14, Y+6	; 0x06
    3fe0:	fd 80       	ldd	r15, Y+5	; 0x05
    3fe2:	0c 81       	ldd	r16, Y+4	; 0x04
    3fe4:	1b 81       	ldd	r17, Y+3	; 0x03
    3fe6:	aa 81       	ldd	r26, Y+2	; 0x02
    3fe8:	b9 81       	ldd	r27, Y+1	; 0x01
    3fea:	ce 0f       	add	r28, r30
    3fec:	d1 1d       	adc	r29, r1
    3fee:	0f b6       	in	r0, 0x3f	; 63
    3ff0:	f8 94       	cli
    3ff2:	de bf       	out	0x3e, r29	; 62
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	cd bf       	out	0x3d, r28	; 61
    3ff8:	ed 01       	movw	r28, r26
    3ffa:	08 95       	ret

00003ffc <itoa>:
    3ffc:	fb 01       	movw	r30, r22
    3ffe:	9f 01       	movw	r18, r30
    4000:	e8 94       	clt
    4002:	42 30       	cpi	r20, 0x02	; 2
    4004:	c4 f0       	brlt	.+48     	; 0x4036 <itoa+0x3a>
    4006:	45 32       	cpi	r20, 0x25	; 37
    4008:	b4 f4       	brge	.+44     	; 0x4036 <itoa+0x3a>
    400a:	4a 30       	cpi	r20, 0x0A	; 10
    400c:	29 f4       	brne	.+10     	; 0x4018 <itoa+0x1c>
    400e:	97 fb       	bst	r25, 7
    4010:	1e f4       	brtc	.+6      	; 0x4018 <itoa+0x1c>
    4012:	90 95       	com	r25
    4014:	81 95       	neg	r24
    4016:	9f 4f       	sbci	r25, 0xFF	; 255
    4018:	64 2f       	mov	r22, r20
    401a:	77 27       	eor	r23, r23
    401c:	0e 94 2f 20 	call	0x405e	; 0x405e <__udivmodhi4>
    4020:	80 5d       	subi	r24, 0xD0	; 208
    4022:	8a 33       	cpi	r24, 0x3A	; 58
    4024:	0c f0       	brlt	.+2      	; 0x4028 <itoa+0x2c>
    4026:	89 5d       	subi	r24, 0xD9	; 217
    4028:	81 93       	st	Z+, r24
    402a:	cb 01       	movw	r24, r22
    402c:	00 97       	sbiw	r24, 0x00	; 0
    402e:	a1 f7       	brne	.-24     	; 0x4018 <itoa+0x1c>
    4030:	16 f4       	brtc	.+4      	; 0x4036 <itoa+0x3a>
    4032:	5d e2       	ldi	r21, 0x2D	; 45
    4034:	51 93       	st	Z+, r21
    4036:	10 82       	st	Z, r1
    4038:	c9 01       	movw	r24, r18
    403a:	0c 94 1f 20 	jmp	0x403e	; 0x403e <strrev>

0000403e <strrev>:
    403e:	dc 01       	movw	r26, r24
    4040:	fc 01       	movw	r30, r24
    4042:	67 2f       	mov	r22, r23
    4044:	71 91       	ld	r23, Z+
    4046:	77 23       	and	r23, r23
    4048:	e1 f7       	brne	.-8      	; 0x4042 <strrev+0x4>
    404a:	32 97       	sbiw	r30, 0x02	; 2
    404c:	04 c0       	rjmp	.+8      	; 0x4056 <strrev+0x18>
    404e:	7c 91       	ld	r23, X
    4050:	6d 93       	st	X+, r22
    4052:	70 83       	st	Z, r23
    4054:	62 91       	ld	r22, -Z
    4056:	ae 17       	cp	r26, r30
    4058:	bf 07       	cpc	r27, r31
    405a:	c8 f3       	brcs	.-14     	; 0x404e <strrev+0x10>
    405c:	08 95       	ret

0000405e <__udivmodhi4>:
    405e:	aa 1b       	sub	r26, r26
    4060:	bb 1b       	sub	r27, r27
    4062:	51 e1       	ldi	r21, 0x11	; 17
    4064:	07 c0       	rjmp	.+14     	; 0x4074 <__udivmodhi4_ep>

00004066 <__udivmodhi4_loop>:
    4066:	aa 1f       	adc	r26, r26
    4068:	bb 1f       	adc	r27, r27
    406a:	a6 17       	cp	r26, r22
    406c:	b7 07       	cpc	r27, r23
    406e:	10 f0       	brcs	.+4      	; 0x4074 <__udivmodhi4_ep>
    4070:	a6 1b       	sub	r26, r22
    4072:	b7 0b       	sbc	r27, r23

00004074 <__udivmodhi4_ep>:
    4074:	88 1f       	adc	r24, r24
    4076:	99 1f       	adc	r25, r25
    4078:	5a 95       	dec	r21
    407a:	a9 f7       	brne	.-22     	; 0x4066 <__udivmodhi4_loop>
    407c:	80 95       	com	r24
    407e:	90 95       	com	r25
    4080:	bc 01       	movw	r22, r24
    4082:	cd 01       	movw	r24, r26
    4084:	08 95       	ret

00004086 <_exit>:
    4086:	f8 94       	cli

00004088 <__stop_program>:
    4088:	ff cf       	rjmp	.-2      	; 0x4088 <__stop_program>
